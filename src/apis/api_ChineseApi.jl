# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.

struct ChineseApi <: OpenAPI.APIClientImpl
    client::OpenAPI.Clients.Client
end

"""
The default API base path for APIs in `ChineseApi`.
This can be used to construct the `OpenAPI.Clients.Client` instance.
"""
basepath(::Type{ ChineseApi }) = "https://v2.namsor.com/NamSorAPIv2"

const _returntypes_chinese_name_candidates_ChineseApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => NameMatchCandidatesOut,
    Regex("^" * replace("401", "x"=>".") * "\$") => Nothing,
    Regex("^" * replace("403", "x"=>".") * "\$") => Nothing,
)

function _oacinternal_chinese_name_candidates(_api::ChineseApi, chinese_surname_latin::String, chinese_given_name_latin::String; _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "GET", _returntypes_chinese_name_candidates_ChineseApi, "/api2/json/chineseNameCandidates/{chineseSurnameLatin}/{chineseGivenNameLatin}", ["api_key", ])
    OpenAPI.Clients.set_param(_ctx.path, "chineseSurnameLatin", chinese_surname_latin)  # type String
    OpenAPI.Clients.set_param(_ctx.path, "chineseGivenNameLatin", chinese_given_name_latin)  # type String
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""Identify Chinese name candidates, based on the romanized name ex. Wang Xiaoming

Params:
- chinese_surname_latin::String (required)
- chinese_given_name_latin::String (required)

Return: NameMatchCandidatesOut, OpenAPI.Clients.ApiResponse
"""
function chinese_name_candidates(_api::ChineseApi, chinese_surname_latin::String, chinese_given_name_latin::String; _mediaType=nothing)
    _ctx = _oacinternal_chinese_name_candidates(_api, chinese_surname_latin, chinese_given_name_latin; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function chinese_name_candidates(_api::ChineseApi, response_stream::Channel, chinese_surname_latin::String, chinese_given_name_latin::String; _mediaType=nothing)
    _ctx = _oacinternal_chinese_name_candidates(_api, chinese_surname_latin, chinese_given_name_latin; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_chinese_name_candidates_batch_ChineseApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => BatchNameMatchCandidatesOut,
    Regex("^" * replace("401", "x"=>".") * "\$") => Nothing,
    Regex("^" * replace("403", "x"=>".") * "\$") => Nothing,
    Regex("^" * replace("400", "x"=>".") * "\$") => Nothing,
)

function _oacinternal_chinese_name_candidates_batch(_api::ChineseApi; batch_first_last_name_in=nothing, _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "POST", _returntypes_chinese_name_candidates_batch_ChineseApi, "/api2/json/chineseNameCandidatesBatch", ["api_key", ], batch_first_last_name_in)
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? ["application/json", ] : [_mediaType])
    return _ctx
end

@doc raw"""Identify Chinese name candidates, based on the romanized name (firstName = chineseGivenName; lastName=chineseSurname), ex. Wang Xiaoming

Params:
- batch_first_last_name_in::BatchFirstLastNameIn

Return: BatchNameMatchCandidatesOut, OpenAPI.Clients.ApiResponse
"""
function chinese_name_candidates_batch(_api::ChineseApi; batch_first_last_name_in=nothing, _mediaType=nothing)
    _ctx = _oacinternal_chinese_name_candidates_batch(_api; batch_first_last_name_in=batch_first_last_name_in, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function chinese_name_candidates_batch(_api::ChineseApi, response_stream::Channel; batch_first_last_name_in=nothing, _mediaType=nothing)
    _ctx = _oacinternal_chinese_name_candidates_batch(_api; batch_first_last_name_in=batch_first_last_name_in, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_chinese_name_candidates_gender_batch_ChineseApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => BatchNameMatchCandidatesOut,
    Regex("^" * replace("401", "x"=>".") * "\$") => Nothing,
    Regex("^" * replace("403", "x"=>".") * "\$") => Nothing,
    Regex("^" * replace("400", "x"=>".") * "\$") => Nothing,
)

function _oacinternal_chinese_name_candidates_gender_batch(_api::ChineseApi; batch_first_last_name_gender_in=nothing, _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "POST", _returntypes_chinese_name_candidates_gender_batch_ChineseApi, "/api2/json/chineseNameCandidatesGenderBatch", ["api_key", ], batch_first_last_name_gender_in)
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? ["application/json", ] : [_mediaType])
    return _ctx
end

@doc raw"""Identify Chinese name candidates, based on the romanized name (firstName = chineseGivenName; lastName=chineseSurname) ex. Wang Xiaoming.

Params:
- batch_first_last_name_gender_in::BatchFirstLastNameGenderIn

Return: BatchNameMatchCandidatesOut, OpenAPI.Clients.ApiResponse
"""
function chinese_name_candidates_gender_batch(_api::ChineseApi; batch_first_last_name_gender_in=nothing, _mediaType=nothing)
    _ctx = _oacinternal_chinese_name_candidates_gender_batch(_api; batch_first_last_name_gender_in=batch_first_last_name_gender_in, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function chinese_name_candidates_gender_batch(_api::ChineseApi, response_stream::Channel; batch_first_last_name_gender_in=nothing, _mediaType=nothing)
    _ctx = _oacinternal_chinese_name_candidates_gender_batch(_api; batch_first_last_name_gender_in=batch_first_last_name_gender_in, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_chinese_name_gender_candidates_ChineseApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => NameMatchCandidatesOut,
    Regex("^" * replace("401", "x"=>".") * "\$") => Nothing,
    Regex("^" * replace("403", "x"=>".") * "\$") => Nothing,
)

function _oacinternal_chinese_name_gender_candidates(_api::ChineseApi, chinese_surname_latin::String, chinese_given_name_latin::String, known_gender::String; _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "GET", _returntypes_chinese_name_gender_candidates_ChineseApi, "/api2/json/chineseNameGenderCandidates/{chineseSurnameLatin}/{chineseGivenNameLatin}/{knownGender}", ["api_key", ])
    OpenAPI.Clients.set_param(_ctx.path, "chineseSurnameLatin", chinese_surname_latin)  # type String
    OpenAPI.Clients.set_param(_ctx.path, "chineseGivenNameLatin", chinese_given_name_latin)  # type String
    OpenAPI.Clients.set_param(_ctx.path, "knownGender", known_gender)  # type String
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""Identify Chinese name candidates, based on the romanized name ex. Wang Xiaoming - having a known gender ('male' or 'female')

Params:
- chinese_surname_latin::String (required)
- chinese_given_name_latin::String (required)
- known_gender::String (required)

Return: NameMatchCandidatesOut, OpenAPI.Clients.ApiResponse
"""
function chinese_name_gender_candidates(_api::ChineseApi, chinese_surname_latin::String, chinese_given_name_latin::String, known_gender::String; _mediaType=nothing)
    _ctx = _oacinternal_chinese_name_gender_candidates(_api, chinese_surname_latin, chinese_given_name_latin, known_gender; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function chinese_name_gender_candidates(_api::ChineseApi, response_stream::Channel, chinese_surname_latin::String, chinese_given_name_latin::String, known_gender::String; _mediaType=nothing)
    _ctx = _oacinternal_chinese_name_gender_candidates(_api, chinese_surname_latin, chinese_given_name_latin, known_gender; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_chinese_name_match_ChineseApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => NameMatchedOut,
    Regex("^" * replace("401", "x"=>".") * "\$") => Nothing,
    Regex("^" * replace("403", "x"=>".") * "\$") => Nothing,
)

function _oacinternal_chinese_name_match(_api::ChineseApi, chinese_surname_latin::String, chinese_given_name_latin::String, chinese_name::String; _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "GET", _returntypes_chinese_name_match_ChineseApi, "/api2/json/chineseNameMatch/{chineseSurnameLatin}/{chineseGivenNameLatin}/{chineseName}", ["api_key", ])
    OpenAPI.Clients.set_param(_ctx.path, "chineseSurnameLatin", chinese_surname_latin)  # type String
    OpenAPI.Clients.set_param(_ctx.path, "chineseGivenNameLatin", chinese_given_name_latin)  # type String
    OpenAPI.Clients.set_param(_ctx.path, "chineseName", chinese_name)  # type String
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""Return a score for matching Chinese name ex. 王晓明 with a romanized name ex. Wang Xiaoming

Params:
- chinese_surname_latin::String (required)
- chinese_given_name_latin::String (required)
- chinese_name::String (required)

Return: NameMatchedOut, OpenAPI.Clients.ApiResponse
"""
function chinese_name_match(_api::ChineseApi, chinese_surname_latin::String, chinese_given_name_latin::String, chinese_name::String; _mediaType=nothing)
    _ctx = _oacinternal_chinese_name_match(_api, chinese_surname_latin, chinese_given_name_latin, chinese_name; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function chinese_name_match(_api::ChineseApi, response_stream::Channel, chinese_surname_latin::String, chinese_given_name_latin::String, chinese_name::String; _mediaType=nothing)
    _ctx = _oacinternal_chinese_name_match(_api, chinese_surname_latin, chinese_given_name_latin, chinese_name; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_chinese_name_match_batch_ChineseApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => BatchNameMatchedOut,
    Regex("^" * replace("401", "x"=>".") * "\$") => Nothing,
    Regex("^" * replace("403", "x"=>".") * "\$") => Nothing,
    Regex("^" * replace("400", "x"=>".") * "\$") => Nothing,
)

function _oacinternal_chinese_name_match_batch(_api::ChineseApi; batch_match_personal_first_last_name_in=nothing, _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "POST", _returntypes_chinese_name_match_batch_ChineseApi, "/api2/json/chineseNameMatchBatch", ["api_key", ], batch_match_personal_first_last_name_in)
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? ["application/json", ] : [_mediaType])
    return _ctx
end

@doc raw"""Identify Chinese name candidates, based on the romanized name (firstName = chineseGivenName; lastName=chineseSurname), ex. Wang Xiaoming

Params:
- batch_match_personal_first_last_name_in::BatchMatchPersonalFirstLastNameIn

Return: BatchNameMatchedOut, OpenAPI.Clients.ApiResponse
"""
function chinese_name_match_batch(_api::ChineseApi; batch_match_personal_first_last_name_in=nothing, _mediaType=nothing)
    _ctx = _oacinternal_chinese_name_match_batch(_api; batch_match_personal_first_last_name_in=batch_match_personal_first_last_name_in, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function chinese_name_match_batch(_api::ChineseApi, response_stream::Channel; batch_match_personal_first_last_name_in=nothing, _mediaType=nothing)
    _ctx = _oacinternal_chinese_name_match_batch(_api; batch_match_personal_first_last_name_in=batch_match_personal_first_last_name_in, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_gender_chinese_name_ChineseApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => PersonalNameGenderedOut,
    Regex("^" * replace("401", "x"=>".") * "\$") => Nothing,
    Regex("^" * replace("403", "x"=>".") * "\$") => Nothing,
)

function _oacinternal_gender_chinese_name(_api::ChineseApi, chinese_name::String; _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "GET", _returntypes_gender_chinese_name_ChineseApi, "/api2/json/genderChineseName/{chineseName}", ["api_key", ])
    OpenAPI.Clients.set_param(_ctx.path, "chineseName", chinese_name)  # type String
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""Infer the likely gender of a Chinese full name ex. 王晓明

Params:
- chinese_name::String (required)

Return: PersonalNameGenderedOut, OpenAPI.Clients.ApiResponse
"""
function gender_chinese_name(_api::ChineseApi, chinese_name::String; _mediaType=nothing)
    _ctx = _oacinternal_gender_chinese_name(_api, chinese_name; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function gender_chinese_name(_api::ChineseApi, response_stream::Channel, chinese_name::String; _mediaType=nothing)
    _ctx = _oacinternal_gender_chinese_name(_api, chinese_name; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_gender_chinese_name_batch_ChineseApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => BatchPersonalNameGenderedOut,
    Regex("^" * replace("401", "x"=>".") * "\$") => Nothing,
    Regex("^" * replace("403", "x"=>".") * "\$") => Nothing,
    Regex("^" * replace("400", "x"=>".") * "\$") => Nothing,
)

function _oacinternal_gender_chinese_name_batch(_api::ChineseApi; batch_personal_name_in=nothing, _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "POST", _returntypes_gender_chinese_name_batch_ChineseApi, "/api2/json/genderChineseNameBatch", ["api_key", ], batch_personal_name_in)
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? ["application/json", ] : [_mediaType])
    return _ctx
end

@doc raw"""Infer the likely gender of up to 100 full names ex. 王晓明

Params:
- batch_personal_name_in::BatchPersonalNameIn

Return: BatchPersonalNameGenderedOut, OpenAPI.Clients.ApiResponse
"""
function gender_chinese_name_batch(_api::ChineseApi; batch_personal_name_in=nothing, _mediaType=nothing)
    _ctx = _oacinternal_gender_chinese_name_batch(_api; batch_personal_name_in=batch_personal_name_in, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function gender_chinese_name_batch(_api::ChineseApi, response_stream::Channel; batch_personal_name_in=nothing, _mediaType=nothing)
    _ctx = _oacinternal_gender_chinese_name_batch(_api; batch_personal_name_in=batch_personal_name_in, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_gender_chinese_name_pinyin_ChineseApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => FirstLastNameGenderedOut,
    Regex("^" * replace("401", "x"=>".") * "\$") => Nothing,
    Regex("^" * replace("403", "x"=>".") * "\$") => Nothing,
)

function _oacinternal_gender_chinese_name_pinyin(_api::ChineseApi, chinese_surname_latin::String, chinese_given_name_latin::String; _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "GET", _returntypes_gender_chinese_name_pinyin_ChineseApi, "/api2/json/genderChineseNamePinyin/{chineseSurnameLatin}/{chineseGivenNameLatin}", ["api_key", ])
    OpenAPI.Clients.set_param(_ctx.path, "chineseSurnameLatin", chinese_surname_latin)  # type String
    OpenAPI.Clients.set_param(_ctx.path, "chineseGivenNameLatin", chinese_given_name_latin)  # type String
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""Infer the likely gender of a Chinese name in LATIN (Pinyin).

Params:
- chinese_surname_latin::String (required)
- chinese_given_name_latin::String (required)

Return: FirstLastNameGenderedOut, OpenAPI.Clients.ApiResponse
"""
function gender_chinese_name_pinyin(_api::ChineseApi, chinese_surname_latin::String, chinese_given_name_latin::String; _mediaType=nothing)
    _ctx = _oacinternal_gender_chinese_name_pinyin(_api, chinese_surname_latin, chinese_given_name_latin; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function gender_chinese_name_pinyin(_api::ChineseApi, response_stream::Channel, chinese_surname_latin::String, chinese_given_name_latin::String; _mediaType=nothing)
    _ctx = _oacinternal_gender_chinese_name_pinyin(_api, chinese_surname_latin, chinese_given_name_latin; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_gender_chinese_name_pinyin_batch_ChineseApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => BatchFirstLastNameGenderedOut,
    Regex("^" * replace("401", "x"=>".") * "\$") => Nothing,
    Regex("^" * replace("403", "x"=>".") * "\$") => Nothing,
    Regex("^" * replace("400", "x"=>".") * "\$") => Nothing,
)

function _oacinternal_gender_chinese_name_pinyin_batch(_api::ChineseApi; batch_first_last_name_in=nothing, _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "POST", _returntypes_gender_chinese_name_pinyin_batch_ChineseApi, "/api2/json/genderChineseNamePinyinBatch", ["api_key", ], batch_first_last_name_in)
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? ["application/json", ] : [_mediaType])
    return _ctx
end

@doc raw"""Infer the likely gender of up to 100 Chinese names in LATIN (Pinyin).

Params:
- batch_first_last_name_in::BatchFirstLastNameIn

Return: BatchFirstLastNameGenderedOut, OpenAPI.Clients.ApiResponse
"""
function gender_chinese_name_pinyin_batch(_api::ChineseApi; batch_first_last_name_in=nothing, _mediaType=nothing)
    _ctx = _oacinternal_gender_chinese_name_pinyin_batch(_api; batch_first_last_name_in=batch_first_last_name_in, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function gender_chinese_name_pinyin_batch(_api::ChineseApi, response_stream::Channel; batch_first_last_name_in=nothing, _mediaType=nothing)
    _ctx = _oacinternal_gender_chinese_name_pinyin_batch(_api; batch_first_last_name_in=batch_first_last_name_in, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_parse_chinese_name_ChineseApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => PersonalNameParsedOut,
    Regex("^" * replace("401", "x"=>".") * "\$") => Nothing,
    Regex("^" * replace("403", "x"=>".") * "\$") => Nothing,
)

function _oacinternal_parse_chinese_name(_api::ChineseApi, chinese_name::String; _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "GET", _returntypes_parse_chinese_name_ChineseApi, "/api2/json/parseChineseName/{chineseName}", ["api_key", ])
    OpenAPI.Clients.set_param(_ctx.path, "chineseName", chinese_name)  # type String
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""Infer the likely first/last name structure of a name, ex. 王晓明 -> 王(surname) 晓明(given name)

Params:
- chinese_name::String (required)

Return: PersonalNameParsedOut, OpenAPI.Clients.ApiResponse
"""
function parse_chinese_name(_api::ChineseApi, chinese_name::String; _mediaType=nothing)
    _ctx = _oacinternal_parse_chinese_name(_api, chinese_name; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function parse_chinese_name(_api::ChineseApi, response_stream::Channel, chinese_name::String; _mediaType=nothing)
    _ctx = _oacinternal_parse_chinese_name(_api, chinese_name; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_parse_chinese_name_batch_ChineseApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => BatchPersonalNameParsedOut,
    Regex("^" * replace("401", "x"=>".") * "\$") => Nothing,
    Regex("^" * replace("403", "x"=>".") * "\$") => Nothing,
    Regex("^" * replace("400", "x"=>".") * "\$") => Nothing,
)

function _oacinternal_parse_chinese_name_batch(_api::ChineseApi; batch_personal_name_in=nothing, _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "POST", _returntypes_parse_chinese_name_batch_ChineseApi, "/api2/json/parseChineseNameBatch", ["api_key", ], batch_personal_name_in)
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? ["application/json", ] : [_mediaType])
    return _ctx
end

@doc raw"""Infer the likely first/last name structure of a name, ex. 王晓明 -> 王(surname) 晓明(given name).

Params:
- batch_personal_name_in::BatchPersonalNameIn

Return: BatchPersonalNameParsedOut, OpenAPI.Clients.ApiResponse
"""
function parse_chinese_name_batch(_api::ChineseApi; batch_personal_name_in=nothing, _mediaType=nothing)
    _ctx = _oacinternal_parse_chinese_name_batch(_api; batch_personal_name_in=batch_personal_name_in, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function parse_chinese_name_batch(_api::ChineseApi, response_stream::Channel; batch_personal_name_in=nothing, _mediaType=nothing)
    _ctx = _oacinternal_parse_chinese_name_batch(_api; batch_personal_name_in=batch_personal_name_in, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_pinyin_chinese_name_ChineseApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => PersonalNameParsedOut,
    Regex("^" * replace("401", "x"=>".") * "\$") => Nothing,
    Regex("^" * replace("403", "x"=>".") * "\$") => Nothing,
)

function _oacinternal_pinyin_chinese_name(_api::ChineseApi, chinese_name::String; _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "GET", _returntypes_pinyin_chinese_name_ChineseApi, "/api2/json/pinyinChineseName/{chineseName}", ["api_key", ])
    OpenAPI.Clients.set_param(_ctx.path, "chineseName", chinese_name)  # type String
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""Romanize the Chinese name to Pinyin, ex. 王晓明 -> Wang (surname) Xiaoming (given name)

Params:
- chinese_name::String (required)

Return: PersonalNameParsedOut, OpenAPI.Clients.ApiResponse
"""
function pinyin_chinese_name(_api::ChineseApi, chinese_name::String; _mediaType=nothing)
    _ctx = _oacinternal_pinyin_chinese_name(_api, chinese_name; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function pinyin_chinese_name(_api::ChineseApi, response_stream::Channel, chinese_name::String; _mediaType=nothing)
    _ctx = _oacinternal_pinyin_chinese_name(_api, chinese_name; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_pinyin_chinese_name_batch_ChineseApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => BatchPersonalNameParsedOut,
    Regex("^" * replace("401", "x"=>".") * "\$") => Nothing,
    Regex("^" * replace("403", "x"=>".") * "\$") => Nothing,
    Regex("^" * replace("400", "x"=>".") * "\$") => Nothing,
)

function _oacinternal_pinyin_chinese_name_batch(_api::ChineseApi; batch_personal_name_in=nothing, _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "POST", _returntypes_pinyin_chinese_name_batch_ChineseApi, "/api2/json/pinyinChineseNameBatch", ["api_key", ], batch_personal_name_in)
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? ["application/json", ] : [_mediaType])
    return _ctx
end

@doc raw"""Romanize a list of Chinese name to Pinyin, ex. 王晓明 -> Wang (surname) Xiaoming (given name).

Params:
- batch_personal_name_in::BatchPersonalNameIn

Return: BatchPersonalNameParsedOut, OpenAPI.Clients.ApiResponse
"""
function pinyin_chinese_name_batch(_api::ChineseApi; batch_personal_name_in=nothing, _mediaType=nothing)
    _ctx = _oacinternal_pinyin_chinese_name_batch(_api; batch_personal_name_in=batch_personal_name_in, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function pinyin_chinese_name_batch(_api::ChineseApi, response_stream::Channel; batch_personal_name_in=nothing, _mediaType=nothing)
    _ctx = _oacinternal_pinyin_chinese_name_batch(_api; batch_personal_name_in=batch_personal_name_in, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

export chinese_name_candidates
export chinese_name_candidates_batch
export chinese_name_candidates_gender_batch
export chinese_name_gender_candidates
export chinese_name_match
export chinese_name_match_batch
export gender_chinese_name
export gender_chinese_name_batch
export gender_chinese_name_pinyin
export gender_chinese_name_pinyin_batch
export parse_chinese_name
export parse_chinese_name_batch
export pinyin_chinese_name
export pinyin_chinese_name_batch
