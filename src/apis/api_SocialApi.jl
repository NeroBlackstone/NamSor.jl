# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.

struct SocialApi <: OpenAPI.APIClientImpl
    client::OpenAPI.Clients.Client
end

"""
The default API base path for APIs in `SocialApi`.
This can be used to construct the `OpenAPI.Clients.Client` instance.
"""
basepath(::Type{ SocialApi }) = "https://v2.namsor.com/NamSorAPIv2"

const _returntypes_phone_code_SocialApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => FirstLastNamePhoneCodedOut,
    Regex("^" * replace("401", "x"=>".") * "\$") => Nothing,
    Regex("^" * replace("403", "x"=>".") * "\$") => Nothing,
)

function _oacinternal_phone_code(_api::SocialApi, first_name::String, last_name::String, phone_number::String; _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "GET", _returntypes_phone_code_SocialApi, "/api2/json/phoneCode/{firstName}/{lastName}/{phoneNumber}", ["api_key", ])
    OpenAPI.Clients.set_param(_ctx.path, "firstName", first_name)  # type String
    OpenAPI.Clients.set_param(_ctx.path, "lastName", last_name)  # type String
    OpenAPI.Clients.set_param(_ctx.path, "phoneNumber", phone_number)  # type String
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""[USES 11 UNITS PER NAME] Infer the likely country and phone prefix, given a personal name and formatted / unformatted phone number.

Params:
- first_name::String (required)
- last_name::String (required)
- phone_number::String (required)

Return: FirstLastNamePhoneCodedOut, OpenAPI.Clients.ApiResponse
"""
function phone_code(_api::SocialApi, first_name::String, last_name::String, phone_number::String; _mediaType=nothing)
    _ctx = _oacinternal_phone_code(_api, first_name, last_name, phone_number; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function phone_code(_api::SocialApi, response_stream::Channel, first_name::String, last_name::String, phone_number::String; _mediaType=nothing)
    _ctx = _oacinternal_phone_code(_api, first_name, last_name, phone_number; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_phone_code_batch_SocialApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => BatchFirstLastNamePhoneCodedOut,
    Regex("^" * replace("401", "x"=>".") * "\$") => Nothing,
    Regex("^" * replace("403", "x"=>".") * "\$") => Nothing,
    Regex("^" * replace("400", "x"=>".") * "\$") => Nothing,
)

function _oacinternal_phone_code_batch(_api::SocialApi; batch_first_last_name_phone_number_in=nothing, _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "POST", _returntypes_phone_code_batch_SocialApi, "/api2/json/phoneCodeBatch", ["api_key", ], batch_first_last_name_phone_number_in)
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? ["application/json", ] : [_mediaType])
    return _ctx
end

@doc raw"""[USES 11 UNITS PER NAME] Infer the likely country and phone prefix, of up to 100 personal names, detecting automatically the local context given a name and formatted / unformatted phone number.

Params:
- batch_first_last_name_phone_number_in::BatchFirstLastNamePhoneNumberIn

Return: BatchFirstLastNamePhoneCodedOut, OpenAPI.Clients.ApiResponse
"""
function phone_code_batch(_api::SocialApi; batch_first_last_name_phone_number_in=nothing, _mediaType=nothing)
    _ctx = _oacinternal_phone_code_batch(_api; batch_first_last_name_phone_number_in=batch_first_last_name_phone_number_in, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function phone_code_batch(_api::SocialApi, response_stream::Channel; batch_first_last_name_phone_number_in=nothing, _mediaType=nothing)
    _ctx = _oacinternal_phone_code_batch(_api; batch_first_last_name_phone_number_in=batch_first_last_name_phone_number_in, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_phone_code_geo_SocialApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => FirstLastNamePhoneCodedOut,
    Regex("^" * replace("401", "x"=>".") * "\$") => Nothing,
    Regex("^" * replace("403", "x"=>".") * "\$") => Nothing,
)

function _oacinternal_phone_code_geo(_api::SocialApi, first_name::String, last_name::String, phone_number::String, country_iso2::String; _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "GET", _returntypes_phone_code_geo_SocialApi, "/api2/json/phoneCodeGeo/{firstName}/{lastName}/{phoneNumber}/{countryIso2}", ["api_key", ])
    OpenAPI.Clients.set_param(_ctx.path, "firstName", first_name)  # type String
    OpenAPI.Clients.set_param(_ctx.path, "lastName", last_name)  # type String
    OpenAPI.Clients.set_param(_ctx.path, "phoneNumber", phone_number)  # type String
    OpenAPI.Clients.set_param(_ctx.path, "countryIso2", country_iso2)  # type String
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""[USES 11 UNITS PER NAME] Infer the likely phone prefix, given a personal name and formatted / unformatted phone number, with a local context (ISO2 country of residence).

Params:
- first_name::String (required)
- last_name::String (required)
- phone_number::String (required)
- country_iso2::String (required)

Return: FirstLastNamePhoneCodedOut, OpenAPI.Clients.ApiResponse
"""
function phone_code_geo(_api::SocialApi, first_name::String, last_name::String, phone_number::String, country_iso2::String; _mediaType=nothing)
    _ctx = _oacinternal_phone_code_geo(_api, first_name, last_name, phone_number, country_iso2; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function phone_code_geo(_api::SocialApi, response_stream::Channel, first_name::String, last_name::String, phone_number::String, country_iso2::String; _mediaType=nothing)
    _ctx = _oacinternal_phone_code_geo(_api, first_name, last_name, phone_number, country_iso2; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_phone_code_geo_batch_SocialApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => BatchFirstLastNamePhoneCodedOut,
    Regex("^" * replace("401", "x"=>".") * "\$") => Nothing,
    Regex("^" * replace("403", "x"=>".") * "\$") => Nothing,
    Regex("^" * replace("400", "x"=>".") * "\$") => Nothing,
)

function _oacinternal_phone_code_geo_batch(_api::SocialApi; batch_first_last_name_phone_number_geo_in=nothing, _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "POST", _returntypes_phone_code_geo_batch_SocialApi, "/api2/json/phoneCodeGeoBatch", ["api_key", ], batch_first_last_name_phone_number_geo_in)
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? ["application/json", ] : [_mediaType])
    return _ctx
end

@doc raw"""[USES 11 UNITS PER NAME] Infer the likely country and phone prefix, of up to 100 personal names, with a local context (ISO2 country of residence).

Params:
- batch_first_last_name_phone_number_geo_in::BatchFirstLastNamePhoneNumberGeoIn

Return: BatchFirstLastNamePhoneCodedOut, OpenAPI.Clients.ApiResponse
"""
function phone_code_geo_batch(_api::SocialApi; batch_first_last_name_phone_number_geo_in=nothing, _mediaType=nothing)
    _ctx = _oacinternal_phone_code_geo_batch(_api; batch_first_last_name_phone_number_geo_in=batch_first_last_name_phone_number_geo_in, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function phone_code_geo_batch(_api::SocialApi, response_stream::Channel; batch_first_last_name_phone_number_geo_in=nothing, _mediaType=nothing)
    _ctx = _oacinternal_phone_code_geo_batch(_api; batch_first_last_name_phone_number_geo_in=batch_first_last_name_phone_number_geo_in, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_phone_code_geo_feedback_loop_SocialApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => FirstLastNamePhoneCodedOut,
    Regex("^" * replace("401", "x"=>".") * "\$") => Nothing,
    Regex("^" * replace("403", "x"=>".") * "\$") => Nothing,
)

function _oacinternal_phone_code_geo_feedback_loop(_api::SocialApi, first_name::String, last_name::String, phone_number::String, phone_number_e164::String, country_iso2::String; _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "GET", _returntypes_phone_code_geo_feedback_loop_SocialApi, "/api2/json/phoneCodeGeoFeedbackLoop/{firstName}/{lastName}/{phoneNumber}/{phoneNumberE164}/{countryIso2}", ["api_key", ])
    OpenAPI.Clients.set_param(_ctx.path, "firstName", first_name)  # type String
    OpenAPI.Clients.set_param(_ctx.path, "lastName", last_name)  # type String
    OpenAPI.Clients.set_param(_ctx.path, "phoneNumber", phone_number)  # type String
    OpenAPI.Clients.set_param(_ctx.path, "phoneNumberE164", phone_number_e164)  # type String
    OpenAPI.Clients.set_param(_ctx.path, "countryIso2", country_iso2)  # type String
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""[CREDITS 1 UNIT] Feedback loop to better infer the likely phone prefix, given a personal name and formatted / unformatted phone number, with a local context (ISO2 country of residence).

Params:
- first_name::String (required)
- last_name::String (required)
- phone_number::String (required)
- phone_number_e164::String (required)
- country_iso2::String (required)

Return: FirstLastNamePhoneCodedOut, OpenAPI.Clients.ApiResponse
"""
function phone_code_geo_feedback_loop(_api::SocialApi, first_name::String, last_name::String, phone_number::String, phone_number_e164::String, country_iso2::String; _mediaType=nothing)
    _ctx = _oacinternal_phone_code_geo_feedback_loop(_api, first_name, last_name, phone_number, phone_number_e164, country_iso2; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function phone_code_geo_feedback_loop(_api::SocialApi, response_stream::Channel, first_name::String, last_name::String, phone_number::String, phone_number_e164::String, country_iso2::String; _mediaType=nothing)
    _ctx = _oacinternal_phone_code_geo_feedback_loop(_api, first_name, last_name, phone_number, phone_number_e164, country_iso2; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

export phone_code
export phone_code_batch
export phone_code_geo
export phone_code_geo_batch
export phone_code_geo_feedback_loop
