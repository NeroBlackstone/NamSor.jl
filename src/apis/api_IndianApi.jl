# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.

struct IndianApi <: OpenAPI.APIClientImpl
    client::OpenAPI.Clients.Client
end

"""
The default API base path for APIs in `IndianApi`.
This can be used to construct the `OpenAPI.Clients.Client` instance.
"""
basepath(::Type{ IndianApi }) = "https://v2.namsor.com/NamSorAPIv2"

const _returntypes_caste_indian_batch_IndianApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => BatchFirstLastNameCasteOut,
    Regex("^" * replace("401", "x"=>".") * "\$") => Nothing,
    Regex("^" * replace("403", "x"=>".") * "\$") => Nothing,
    Regex("^" * replace("400", "x"=>".") * "\$") => Nothing,
)

function _oacinternal_caste_indian_batch(_api::IndianApi; batch_first_last_name_geo_subdivision_in=nothing, _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "POST", _returntypes_caste_indian_batch_IndianApi, "/api2/json/casteIndianBatch", ["api_key", ], batch_first_last_name_geo_subdivision_in)
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? ["application/json", ] : [_mediaType])
    return _ctx
end

@doc raw"""[USES 10 UNITS PER NAME] Infer the likely Indian name caste of up to 100 personal Indian Hindu names. 

Params:
- batch_first_last_name_geo_subdivision_in::BatchFirstLastNameGeoSubdivisionIn

Return: BatchFirstLastNameCasteOut, OpenAPI.Clients.ApiResponse
"""
function caste_indian_batch(_api::IndianApi; batch_first_last_name_geo_subdivision_in=nothing, _mediaType=nothing)
    _ctx = _oacinternal_caste_indian_batch(_api; batch_first_last_name_geo_subdivision_in=batch_first_last_name_geo_subdivision_in, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function caste_indian_batch(_api::IndianApi, response_stream::Channel; batch_first_last_name_geo_subdivision_in=nothing, _mediaType=nothing)
    _ctx = _oacinternal_caste_indian_batch(_api; batch_first_last_name_geo_subdivision_in=batch_first_last_name_geo_subdivision_in, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_castegroup_indian_IndianApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => FirstLastNameCastegroupOut,
    Regex("^" * replace("401", "x"=>".") * "\$") => Nothing,
    Regex("^" * replace("403", "x"=>".") * "\$") => Nothing,
)

function _oacinternal_castegroup_indian(_api::IndianApi, sub_division_iso31662::String, first_name::String, last_name::String; _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "GET", _returntypes_castegroup_indian_IndianApi, "/api2/json/castegroupIndian/{subDivisionIso31662}/{firstName}/{lastName}", ["api_key", ])
    OpenAPI.Clients.set_param(_ctx.path, "subDivisionIso31662", sub_division_iso31662)  # type String
    OpenAPI.Clients.set_param(_ctx.path, "firstName", first_name)  # type String
    OpenAPI.Clients.set_param(_ctx.path, "lastName", last_name)  # type String
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""[USES 10 UNITS PER NAME] Infer the likely Indian name castegroup of a first / last name.

Params:
- sub_division_iso31662::String (required)
- first_name::String (required)
- last_name::String (required)

Return: FirstLastNameCastegroupOut, OpenAPI.Clients.ApiResponse
"""
function castegroup_indian(_api::IndianApi, sub_division_iso31662::String, first_name::String, last_name::String; _mediaType=nothing)
    _ctx = _oacinternal_castegroup_indian(_api, sub_division_iso31662, first_name, last_name; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function castegroup_indian(_api::IndianApi, response_stream::Channel, sub_division_iso31662::String, first_name::String, last_name::String; _mediaType=nothing)
    _ctx = _oacinternal_castegroup_indian(_api, sub_division_iso31662, first_name, last_name; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_castegroup_indian_batch_IndianApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => BatchFirstLastNameCastegroupOut,
    Regex("^" * replace("401", "x"=>".") * "\$") => Nothing,
    Regex("^" * replace("403", "x"=>".") * "\$") => Nothing,
    Regex("^" * replace("400", "x"=>".") * "\$") => Nothing,
)

function _oacinternal_castegroup_indian_batch(_api::IndianApi; batch_first_last_name_subdivision_in=nothing, _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "POST", _returntypes_castegroup_indian_batch_IndianApi, "/api2/json/castegroupIndianBatch", ["api_key", ], batch_first_last_name_subdivision_in)
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? ["application/json", ] : [_mediaType])
    return _ctx
end

@doc raw"""[USES 10 UNITS PER NAME] Infer the likely Indian name castegroup of up to 100 personal first / last names. 

Params:
- batch_first_last_name_subdivision_in::BatchFirstLastNameSubdivisionIn

Return: BatchFirstLastNameCastegroupOut, OpenAPI.Clients.ApiResponse
"""
function castegroup_indian_batch(_api::IndianApi; batch_first_last_name_subdivision_in=nothing, _mediaType=nothing)
    _ctx = _oacinternal_castegroup_indian_batch(_api; batch_first_last_name_subdivision_in=batch_first_last_name_subdivision_in, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function castegroup_indian_batch(_api::IndianApi, response_stream::Channel; batch_first_last_name_subdivision_in=nothing, _mediaType=nothing)
    _ctx = _oacinternal_castegroup_indian_batch(_api; batch_first_last_name_subdivision_in=batch_first_last_name_subdivision_in, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_castegroup_indian_full_IndianApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => PersonalNameCastegroupOut,
    Regex("^" * replace("401", "x"=>".") * "\$") => Nothing,
    Regex("^" * replace("403", "x"=>".") * "\$") => Nothing,
)

function _oacinternal_castegroup_indian_full(_api::IndianApi, sub_division_iso31662::String, personal_name_full::String; _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "GET", _returntypes_castegroup_indian_full_IndianApi, "/api2/json/castegroupIndianFull/{subDivisionIso31662}/{personalNameFull}", ["api_key", ])
    OpenAPI.Clients.set_param(_ctx.path, "subDivisionIso31662", sub_division_iso31662)  # type String
    OpenAPI.Clients.set_param(_ctx.path, "personalNameFull", personal_name_full)  # type String
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""[USES 10 UNITS PER NAME] Infer the likely Indian name castegroup of a personal full name.

Params:
- sub_division_iso31662::String (required)
- personal_name_full::String (required)

Return: PersonalNameCastegroupOut, OpenAPI.Clients.ApiResponse
"""
function castegroup_indian_full(_api::IndianApi, sub_division_iso31662::String, personal_name_full::String; _mediaType=nothing)
    _ctx = _oacinternal_castegroup_indian_full(_api, sub_division_iso31662, personal_name_full; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function castegroup_indian_full(_api::IndianApi, response_stream::Channel, sub_division_iso31662::String, personal_name_full::String; _mediaType=nothing)
    _ctx = _oacinternal_castegroup_indian_full(_api, sub_division_iso31662, personal_name_full; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_castegroup_indian_full_batch_IndianApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => BatchPersonalNameCastegroupOut,
    Regex("^" * replace("401", "x"=>".") * "\$") => Nothing,
    Regex("^" * replace("403", "x"=>".") * "\$") => Nothing,
    Regex("^" * replace("400", "x"=>".") * "\$") => Nothing,
)

function _oacinternal_castegroup_indian_full_batch(_api::IndianApi; batch_personal_name_subdivision_in=nothing, _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "POST", _returntypes_castegroup_indian_full_batch_IndianApi, "/api2/json/castegroupIndianFullBatch", ["api_key", ], batch_personal_name_subdivision_in)
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? ["application/json", ] : [_mediaType])
    return _ctx
end

@doc raw"""[USES 10 UNITS PER NAME] Infer the likely Indian name castegroup of up to 100 personal full names. 

Params:
- batch_personal_name_subdivision_in::BatchPersonalNameSubdivisionIn

Return: BatchPersonalNameCastegroupOut, OpenAPI.Clients.ApiResponse
"""
function castegroup_indian_full_batch(_api::IndianApi; batch_personal_name_subdivision_in=nothing, _mediaType=nothing)
    _ctx = _oacinternal_castegroup_indian_full_batch(_api; batch_personal_name_subdivision_in=batch_personal_name_subdivision_in, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function castegroup_indian_full_batch(_api::IndianApi, response_stream::Channel; batch_personal_name_subdivision_in=nothing, _mediaType=nothing)
    _ctx = _oacinternal_castegroup_indian_full_batch(_api; batch_personal_name_subdivision_in=batch_personal_name_subdivision_in, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_castegroup_indian_hindu_IndianApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => FirstLastNameCasteOut,
    Regex("^" * replace("401", "x"=>".") * "\$") => Nothing,
    Regex("^" * replace("403", "x"=>".") * "\$") => Nothing,
)

function _oacinternal_castegroup_indian_hindu(_api::IndianApi, sub_division_iso31662::String, first_name::String, last_name::String; _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "GET", _returntypes_castegroup_indian_hindu_IndianApi, "/api2/json/casteIndian/{subDivisionIso31662}/{firstName}/{lastName}", ["api_key", ])
    OpenAPI.Clients.set_param(_ctx.path, "subDivisionIso31662", sub_division_iso31662)  # type String
    OpenAPI.Clients.set_param(_ctx.path, "firstName", first_name)  # type String
    OpenAPI.Clients.set_param(_ctx.path, "lastName", last_name)  # type String
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""[USES 10 UNITS PER NAME] Infer the likely Indian name caste of a personal Hindu name.

Params:
- sub_division_iso31662::String (required)
- first_name::String (required)
- last_name::String (required)

Return: FirstLastNameCasteOut, OpenAPI.Clients.ApiResponse
"""
function castegroup_indian_hindu(_api::IndianApi, sub_division_iso31662::String, first_name::String, last_name::String; _mediaType=nothing)
    _ctx = _oacinternal_castegroup_indian_hindu(_api, sub_division_iso31662, first_name, last_name; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function castegroup_indian_hindu(_api::IndianApi, response_stream::Channel, sub_division_iso31662::String, first_name::String, last_name::String; _mediaType=nothing)
    _ctx = _oacinternal_castegroup_indian_hindu(_api, sub_division_iso31662, first_name, last_name; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_religion_IndianApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => PersonalNameReligionedOut,
    Regex("^" * replace("401", "x"=>".") * "\$") => Nothing,
    Regex("^" * replace("403", "x"=>".") * "\$") => Nothing,
)

function _oacinternal_religion(_api::IndianApi, sub_division_iso31662::String, personal_name_full::String; _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "GET", _returntypes_religion_IndianApi, "/api2/json/religionIndianFull/{subDivisionIso31662}/{personalNameFull}", ["api_key", ])
    OpenAPI.Clients.set_param(_ctx.path, "subDivisionIso31662", sub_division_iso31662)  # type String
    OpenAPI.Clients.set_param(_ctx.path, "personalNameFull", personal_name_full)  # type String
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""[USES 10 UNITS PER NAME] Infer the likely religion of a personal Indian full name, provided the Indian state or Union territory (NB/ this can be inferred using the subclassification endpoint).

Params:
- sub_division_iso31662::String (required)
- personal_name_full::String (required)

Return: PersonalNameReligionedOut, OpenAPI.Clients.ApiResponse
"""
function religion(_api::IndianApi, sub_division_iso31662::String, personal_name_full::String; _mediaType=nothing)
    _ctx = _oacinternal_religion(_api, sub_division_iso31662, personal_name_full; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function religion(_api::IndianApi, response_stream::Channel, sub_division_iso31662::String, personal_name_full::String; _mediaType=nothing)
    _ctx = _oacinternal_religion(_api, sub_division_iso31662, personal_name_full; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_religion1_IndianApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => FirstLastNameReligionedOut,
    Regex("^" * replace("401", "x"=>".") * "\$") => Nothing,
    Regex("^" * replace("403", "x"=>".") * "\$") => Nothing,
)

function _oacinternal_religion1(_api::IndianApi, sub_division_iso31662::String, first_name::String, last_name::String; _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "GET", _returntypes_religion1_IndianApi, "/api2/json/religionIndian/{subDivisionIso31662}/{firstName}/{lastName}", ["api_key", ])
    OpenAPI.Clients.set_param(_ctx.path, "subDivisionIso31662", sub_division_iso31662)  # type String
    OpenAPI.Clients.set_param(_ctx.path, "firstName", first_name)  # type String
    OpenAPI.Clients.set_param(_ctx.path, "lastName", last_name)  # type String
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""[USES 10 UNITS PER NAME] Infer the likely religion of a personal Indian first/last name, provided the Indian state or Union territory (NB/ this can be inferred using the subclassification endpoint).

Params:
- sub_division_iso31662::String (required)
- first_name::String (required)
- last_name::String (required)

Return: FirstLastNameReligionedOut, OpenAPI.Clients.ApiResponse
"""
function religion1(_api::IndianApi, sub_division_iso31662::String, first_name::String, last_name::String; _mediaType=nothing)
    _ctx = _oacinternal_religion1(_api, sub_division_iso31662, first_name, last_name; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function religion1(_api::IndianApi, response_stream::Channel, sub_division_iso31662::String, first_name::String, last_name::String; _mediaType=nothing)
    _ctx = _oacinternal_religion1(_api, sub_division_iso31662, first_name, last_name; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_religion_indian_batch_IndianApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => BatchFirstLastNameReligionedOut,
    Regex("^" * replace("401", "x"=>".") * "\$") => Nothing,
    Regex("^" * replace("403", "x"=>".") * "\$") => Nothing,
    Regex("^" * replace("400", "x"=>".") * "\$") => Nothing,
)

function _oacinternal_religion_indian_batch(_api::IndianApi; batch_first_last_name_subdivision_in=nothing, _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "POST", _returntypes_religion_indian_batch_IndianApi, "/api2/json/religionIndianBatch", ["api_key", ], batch_first_last_name_subdivision_in)
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? ["application/json", ] : [_mediaType])
    return _ctx
end

@doc raw"""[USES 10 UNITS PER NAME] Infer the likely religion of up to 100 personal first/last Indian names, provided the subclassification at State or Union territory level (NB/ can be inferred using the subclassification endpoint).

Params:
- batch_first_last_name_subdivision_in::BatchFirstLastNameSubdivisionIn

Return: BatchFirstLastNameReligionedOut, OpenAPI.Clients.ApiResponse
"""
function religion_indian_batch(_api::IndianApi; batch_first_last_name_subdivision_in=nothing, _mediaType=nothing)
    _ctx = _oacinternal_religion_indian_batch(_api; batch_first_last_name_subdivision_in=batch_first_last_name_subdivision_in, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function religion_indian_batch(_api::IndianApi, response_stream::Channel; batch_first_last_name_subdivision_in=nothing, _mediaType=nothing)
    _ctx = _oacinternal_religion_indian_batch(_api; batch_first_last_name_subdivision_in=batch_first_last_name_subdivision_in, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_religion_indian_full_batch_IndianApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => BatchPersonalNameReligionedOut,
    Regex("^" * replace("401", "x"=>".") * "\$") => Nothing,
    Regex("^" * replace("403", "x"=>".") * "\$") => Nothing,
    Regex("^" * replace("400", "x"=>".") * "\$") => Nothing,
)

function _oacinternal_religion_indian_full_batch(_api::IndianApi; batch_personal_name_subdivision_in=nothing, _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "POST", _returntypes_religion_indian_full_batch_IndianApi, "/api2/json/religionIndianFullBatch", ["api_key", ], batch_personal_name_subdivision_in)
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? ["application/json", ] : [_mediaType])
    return _ctx
end

@doc raw"""[USES 10 UNITS PER NAME] Infer the likely religion of up to 100 personal full Indian names, provided the subclassification at State or Union territory level (NB/ can be inferred using the subclassification endpoint).

Params:
- batch_personal_name_subdivision_in::BatchPersonalNameSubdivisionIn

Return: BatchPersonalNameReligionedOut, OpenAPI.Clients.ApiResponse
"""
function religion_indian_full_batch(_api::IndianApi; batch_personal_name_subdivision_in=nothing, _mediaType=nothing)
    _ctx = _oacinternal_religion_indian_full_batch(_api; batch_personal_name_subdivision_in=batch_personal_name_subdivision_in, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function religion_indian_full_batch(_api::IndianApi, response_stream::Channel; batch_personal_name_subdivision_in=nothing, _mediaType=nothing)
    _ctx = _oacinternal_religion_indian_full_batch(_api; batch_personal_name_subdivision_in=batch_personal_name_subdivision_in, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_subclassification_indian_IndianApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => FirstLastNameGeoSubclassificationOut,
    Regex("^" * replace("401", "x"=>".") * "\$") => Nothing,
    Regex("^" * replace("403", "x"=>".") * "\$") => Nothing,
)

function _oacinternal_subclassification_indian(_api::IndianApi, first_name::String, last_name::String; _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "GET", _returntypes_subclassification_indian_IndianApi, "/api2/json/subclassificationIndian/{firstName}/{lastName}", ["api_key", ])
    OpenAPI.Clients.set_param(_ctx.path, "firstName", first_name)  # type String
    OpenAPI.Clients.set_param(_ctx.path, "lastName", last_name)  # type String
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""[USES 10 UNITS PER NAME] Infer the likely Indian state of Union territory according to ISO 3166-2:IN based on the name.

Params:
- first_name::String (required)
- last_name::String (required)

Return: FirstLastNameGeoSubclassificationOut, OpenAPI.Clients.ApiResponse
"""
function subclassification_indian(_api::IndianApi, first_name::String, last_name::String; _mediaType=nothing)
    _ctx = _oacinternal_subclassification_indian(_api, first_name, last_name; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function subclassification_indian(_api::IndianApi, response_stream::Channel, first_name::String, last_name::String; _mediaType=nothing)
    _ctx = _oacinternal_subclassification_indian(_api, first_name, last_name; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_subclassification_indian_batch_IndianApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => BatchFirstLastNameGeoSubclassificationOut,
    Regex("^" * replace("401", "x"=>".") * "\$") => Nothing,
    Regex("^" * replace("403", "x"=>".") * "\$") => Nothing,
    Regex("^" * replace("400", "x"=>".") * "\$") => Nothing,
)

function _oacinternal_subclassification_indian_batch(_api::IndianApi; batch_first_last_name_geo_in=nothing, _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "POST", _returntypes_subclassification_indian_batch_IndianApi, "/api2/json/subclassificationIndianBatch", ["api_key", ], batch_first_last_name_geo_in)
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? ["application/json", ] : [_mediaType])
    return _ctx
end

@doc raw"""[USES 10 UNITS PER NAME] Infer the likely Indian state of Union territory according to ISO 3166-2:IN based on a list of up to 100 names.

Params:
- batch_first_last_name_geo_in::BatchFirstLastNameGeoIn

Return: BatchFirstLastNameGeoSubclassificationOut, OpenAPI.Clients.ApiResponse
"""
function subclassification_indian_batch(_api::IndianApi; batch_first_last_name_geo_in=nothing, _mediaType=nothing)
    _ctx = _oacinternal_subclassification_indian_batch(_api; batch_first_last_name_geo_in=batch_first_last_name_geo_in, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function subclassification_indian_batch(_api::IndianApi, response_stream::Channel; batch_first_last_name_geo_in=nothing, _mediaType=nothing)
    _ctx = _oacinternal_subclassification_indian_batch(_api; batch_first_last_name_geo_in=batch_first_last_name_geo_in, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_subclassification_indian_full_IndianApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => PersonalNameGeoSubclassificationOut,
    Regex("^" * replace("401", "x"=>".") * "\$") => Nothing,
    Regex("^" * replace("403", "x"=>".") * "\$") => Nothing,
)

function _oacinternal_subclassification_indian_full(_api::IndianApi, full_name::String; _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "GET", _returntypes_subclassification_indian_full_IndianApi, "/api2/json/subclassificationIndianFull/{fullName}", ["api_key", ])
    OpenAPI.Clients.set_param(_ctx.path, "fullName", full_name)  # type String
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""[USES 10 UNITS PER NAME] Infer the likely Indian state of Union territory according to ISO 3166-2:IN based on the name.

Params:
- full_name::String (required)

Return: PersonalNameGeoSubclassificationOut, OpenAPI.Clients.ApiResponse
"""
function subclassification_indian_full(_api::IndianApi, full_name::String; _mediaType=nothing)
    _ctx = _oacinternal_subclassification_indian_full(_api, full_name; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function subclassification_indian_full(_api::IndianApi, response_stream::Channel, full_name::String; _mediaType=nothing)
    _ctx = _oacinternal_subclassification_indian_full(_api, full_name; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_subclassification_indian_full_batch_IndianApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => BatchPersonalNameGeoSubclassificationOut,
    Regex("^" * replace("401", "x"=>".") * "\$") => Nothing,
    Regex("^" * replace("403", "x"=>".") * "\$") => Nothing,
    Regex("^" * replace("400", "x"=>".") * "\$") => Nothing,
)

function _oacinternal_subclassification_indian_full_batch(_api::IndianApi; batch_personal_name_geo_in=nothing, _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "POST", _returntypes_subclassification_indian_full_batch_IndianApi, "/api2/json/subclassificationIndianFullBatch", ["api_key", ], batch_personal_name_geo_in)
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? ["application/json", ] : [_mediaType])
    return _ctx
end

@doc raw"""[USES 10 UNITS PER NAME] Infer the likely Indian state of Union territory according to ISO 3166-2:IN based on a list of up to 100 names.

Params:
- batch_personal_name_geo_in::BatchPersonalNameGeoIn

Return: BatchPersonalNameGeoSubclassificationOut, OpenAPI.Clients.ApiResponse
"""
function subclassification_indian_full_batch(_api::IndianApi; batch_personal_name_geo_in=nothing, _mediaType=nothing)
    _ctx = _oacinternal_subclassification_indian_full_batch(_api; batch_personal_name_geo_in=batch_personal_name_geo_in, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function subclassification_indian_full_batch(_api::IndianApi, response_stream::Channel; batch_personal_name_geo_in=nothing, _mediaType=nothing)
    _ctx = _oacinternal_subclassification_indian_full_batch(_api; batch_personal_name_geo_in=batch_personal_name_geo_in, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

export caste_indian_batch
export castegroup_indian
export castegroup_indian_batch
export castegroup_indian_full
export castegroup_indian_full_batch
export castegroup_indian_hindu
export religion
export religion1
export religion_indian_batch
export religion_indian_full_batch
export subclassification_indian
export subclassification_indian_batch
export subclassification_indian_full
export subclassification_indian_full_batch
