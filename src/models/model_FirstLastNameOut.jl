# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.


@doc raw"""FirstLastNameOut
First / last name structure corresponding to the most likely parsing.

    FirstLastNameOut(;
        script=nothing,
        id=nothing,
        explanation=nothing,
        firstName=nothing,
        lastName=nothing,
    )

    - script::String
    - id::String
    - explanation::String
    - firstName::String : The first name (also known as given name)
    - lastName::String : The last name (also known as family name, or surname)
"""
Base.@kwdef mutable struct FirstLastNameOut <: OpenAPI.APIModel
    script::Union{Nothing, String} = nothing
    id::Union{Nothing, String} = nothing
    explanation::Union{Nothing, String} = nothing
    firstName::Union{Nothing, String} = nothing
    lastName::Union{Nothing, String} = nothing

    function FirstLastNameOut(script, id, explanation, firstName, lastName, )
        OpenAPI.validate_property(FirstLastNameOut, Symbol("script"), script)
        OpenAPI.validate_property(FirstLastNameOut, Symbol("id"), id)
        OpenAPI.validate_property(FirstLastNameOut, Symbol("explanation"), explanation)
        OpenAPI.validate_property(FirstLastNameOut, Symbol("firstName"), firstName)
        OpenAPI.validate_property(FirstLastNameOut, Symbol("lastName"), lastName)
        return new(script, id, explanation, firstName, lastName, )
    end
end # type FirstLastNameOut

const _property_types_FirstLastNameOut = Dict{Symbol,String}(Symbol("script")=>"String", Symbol("id")=>"String", Symbol("explanation")=>"String", Symbol("firstName")=>"String", Symbol("lastName")=>"String", )
OpenAPI.property_type(::Type{ FirstLastNameOut }, name::Symbol) = Union{Nothing,eval(Base.Meta.parse(_property_types_FirstLastNameOut[name]))}

function check_required(o::FirstLastNameOut)
    true
end

function OpenAPI.validate_property(::Type{ FirstLastNameOut }, name::Symbol, val)
end
