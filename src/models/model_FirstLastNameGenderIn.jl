# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.


@doc raw"""FirstLastNameGenderIn

    FirstLastNameGenderIn(;
        id=nothing,
        firstName=nothing,
        lastName=nothing,
        gender=nothing,
    )

    - id::String
    - firstName::String
    - lastName::String
    - gender::String : The known gender of the name
"""
Base.@kwdef mutable struct FirstLastNameGenderIn <: OpenAPI.APIModel
    id::Union{Nothing, String} = nothing
    firstName::Union{Nothing, String} = nothing
    lastName::Union{Nothing, String} = nothing
    gender::Union{Nothing, String} = nothing

    function FirstLastNameGenderIn(id, firstName, lastName, gender, )
        OpenAPI.validate_property(FirstLastNameGenderIn, Symbol("id"), id)
        OpenAPI.validate_property(FirstLastNameGenderIn, Symbol("firstName"), firstName)
        OpenAPI.validate_property(FirstLastNameGenderIn, Symbol("lastName"), lastName)
        OpenAPI.validate_property(FirstLastNameGenderIn, Symbol("gender"), gender)
        return new(id, firstName, lastName, gender, )
    end
end # type FirstLastNameGenderIn

const _property_types_FirstLastNameGenderIn = Dict{Symbol,String}(Symbol("id")=>"String", Symbol("firstName")=>"String", Symbol("lastName")=>"String", Symbol("gender")=>"String", )
OpenAPI.property_type(::Type{ FirstLastNameGenderIn }, name::Symbol) = Union{Nothing,eval(Base.Meta.parse(_property_types_FirstLastNameGenderIn[name]))}

function check_required(o::FirstLastNameGenderIn)
    true
end

function OpenAPI.validate_property(::Type{ FirstLastNameGenderIn }, name::Symbol, val)
end
