# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.


@doc raw"""APIKeyOut

    APIKeyOut(;
        apiKey=nothing,
        userId=nothing,
        admin=nothing,
        vetted=nothing,
        learnable=nothing,
        anonymized=nothing,
        partner=nothing,
        striped=nothing,
        corporate=nothing,
        disabled=nothing,
        explainable=nothing,
        ipAddress=nothing,
        communityEngageOption=nothing,
    )

    - apiKey::String : The user API Key.
    - userId::String : The user identifier.
    - admin::Bool : The API Key has admin role.
    - vetted::Bool : The API Key is vetted (assumed truthful) for machine learning.
    - learnable::Bool : The API Key is learnable (without assuming truthfulness) for machine learning. Set learnable&#x3D;false and anonymized&#x3D;true for highest privacy (ie. to forget data as it&#39;s processed).
    - anonymized::Bool : The API Key is anonymized (using SHA-252 digest for logging). Set learnable&#x3D;false and anonymized&#x3D;true for highest privacy (ie. to forget data as it&#39;s processed).
    - partner::Bool : The API Key has partner role.
    - striped::Bool : The API Key is associated to a valid Stripe account.
    - corporate::Bool : The API Key has role corporate (ex SWIFT payments instead of Stripe payments).
    - disabled::Bool : The API Key is temporarily or permanently disabled.
    - explainable::Bool : The API Key supports the AI explainability option (may require a specific license).
    - ipAddress::String
    - communityEngageOption::CommunityEngageOptionOut
"""
Base.@kwdef mutable struct APIKeyOut <: OpenAPI.APIModel
    apiKey::Union{Nothing, String} = nothing
    userId::Union{Nothing, String} = nothing
    admin::Union{Nothing, Bool} = nothing
    vetted::Union{Nothing, Bool} = nothing
    learnable::Union{Nothing, Bool} = nothing
    anonymized::Union{Nothing, Bool} = nothing
    partner::Union{Nothing, Bool} = nothing
    striped::Union{Nothing, Bool} = nothing
    corporate::Union{Nothing, Bool} = nothing
    disabled::Union{Nothing, Bool} = nothing
    explainable::Union{Nothing, Bool} = nothing
    ipAddress::Union{Nothing, String} = nothing
    communityEngageOption = nothing # spec type: Union{ Nothing, CommunityEngageOptionOut }

    function APIKeyOut(apiKey, userId, admin, vetted, learnable, anonymized, partner, striped, corporate, disabled, explainable, ipAddress, communityEngageOption, )
        OpenAPI.validate_property(APIKeyOut, Symbol("apiKey"), apiKey)
        OpenAPI.validate_property(APIKeyOut, Symbol("userId"), userId)
        OpenAPI.validate_property(APIKeyOut, Symbol("admin"), admin)
        OpenAPI.validate_property(APIKeyOut, Symbol("vetted"), vetted)
        OpenAPI.validate_property(APIKeyOut, Symbol("learnable"), learnable)
        OpenAPI.validate_property(APIKeyOut, Symbol("anonymized"), anonymized)
        OpenAPI.validate_property(APIKeyOut, Symbol("partner"), partner)
        OpenAPI.validate_property(APIKeyOut, Symbol("striped"), striped)
        OpenAPI.validate_property(APIKeyOut, Symbol("corporate"), corporate)
        OpenAPI.validate_property(APIKeyOut, Symbol("disabled"), disabled)
        OpenAPI.validate_property(APIKeyOut, Symbol("explainable"), explainable)
        OpenAPI.validate_property(APIKeyOut, Symbol("ipAddress"), ipAddress)
        OpenAPI.validate_property(APIKeyOut, Symbol("communityEngageOption"), communityEngageOption)
        return new(apiKey, userId, admin, vetted, learnable, anonymized, partner, striped, corporate, disabled, explainable, ipAddress, communityEngageOption, )
    end
end # type APIKeyOut

const _property_types_APIKeyOut = Dict{Symbol,String}(Symbol("apiKey")=>"String", Symbol("userId")=>"String", Symbol("admin")=>"Bool", Symbol("vetted")=>"Bool", Symbol("learnable")=>"Bool", Symbol("anonymized")=>"Bool", Symbol("partner")=>"Bool", Symbol("striped")=>"Bool", Symbol("corporate")=>"Bool", Symbol("disabled")=>"Bool", Symbol("explainable")=>"Bool", Symbol("ipAddress")=>"String", Symbol("communityEngageOption")=>"CommunityEngageOptionOut", )
OpenAPI.property_type(::Type{ APIKeyOut }, name::Symbol) = Union{Nothing,eval(Base.Meta.parse(_property_types_APIKeyOut[name]))}

function check_required(o::APIKeyOut)
    true
end

function OpenAPI.validate_property(::Type{ APIKeyOut }, name::Symbol, val)
end
