# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.


@doc raw"""FirstLastNamePhoneCodedOut
Represents the output of inferring the LIKELY country and phone code from a personal name and phone number.

    FirstLastNamePhoneCodedOut(;
        script=nothing,
        id=nothing,
        explanation=nothing,
        firstName=nothing,
        lastName=nothing,
        internationalPhoneNumberVerified=nothing,
        phoneCountryIso2Verified=nothing,
        phoneCountryCode=nothing,
        phoneCountryCodeAlt=nothing,
        phoneCountryIso2=nothing,
        phoneCountryIso2Alt=nothing,
        originCountryIso2=nothing,
        originCountryIso2Alt=nothing,
        phoneNumber=nothing,
        verified=nothing,
        score=nothing,
        countryIso2=nothing,
    )

    - script::String
    - id::String
    - explanation::String
    - firstName::String : The first name (also known as given name)
    - lastName::String : The last name (also known as family name, or surname)
    - internationalPhoneNumberVerified::String : The normalized phone number, verified using libphonenumber.
    - phoneCountryIso2Verified::String : The phone ISO2 country code, verified using libphonenumber.
    - phoneCountryCode::Int64 : The phone country code of the phone number, verified using libphonenumber.
    - phoneCountryCodeAlt::Int64 : The best alternative phone country code of the phone number.
    - phoneCountryIso2::String : The likely country of the phone number.
    - phoneCountryIso2Alt::String : The best alternative country of the phone number.
    - originCountryIso2::String : The likely country of origin of the name.
    - originCountryIso2Alt::String : The best alternative country of origin of the name.
    - phoneNumber::String : The input phone number.
    - verified::Bool : Indicates if the phone number could be positively verified using libphonenumber.
    - score::Float64 : Higher score is better, but score is not normalized. Use calibratedProbability if available. 
    - countryIso2::String
"""
Base.@kwdef mutable struct FirstLastNamePhoneCodedOut <: OpenAPI.APIModel
    script::Union{Nothing, String} = nothing
    id::Union{Nothing, String} = nothing
    explanation::Union{Nothing, String} = nothing
    firstName::Union{Nothing, String} = nothing
    lastName::Union{Nothing, String} = nothing
    internationalPhoneNumberVerified::Union{Nothing, String} = nothing
    phoneCountryIso2Verified::Union{Nothing, String} = nothing
    phoneCountryCode::Union{Nothing, Int64} = nothing
    phoneCountryCodeAlt::Union{Nothing, Int64} = nothing
    phoneCountryIso2::Union{Nothing, String} = nothing
    phoneCountryIso2Alt::Union{Nothing, String} = nothing
    originCountryIso2::Union{Nothing, String} = nothing
    originCountryIso2Alt::Union{Nothing, String} = nothing
    phoneNumber::Union{Nothing, String} = nothing
    verified::Union{Nothing, Bool} = nothing
    score::Union{Nothing, Float64} = nothing
    countryIso2::Union{Nothing, String} = nothing

    function FirstLastNamePhoneCodedOut(script, id, explanation, firstName, lastName, internationalPhoneNumberVerified, phoneCountryIso2Verified, phoneCountryCode, phoneCountryCodeAlt, phoneCountryIso2, phoneCountryIso2Alt, originCountryIso2, originCountryIso2Alt, phoneNumber, verified, score, countryIso2, )
        OpenAPI.validate_property(FirstLastNamePhoneCodedOut, Symbol("script"), script)
        OpenAPI.validate_property(FirstLastNamePhoneCodedOut, Symbol("id"), id)
        OpenAPI.validate_property(FirstLastNamePhoneCodedOut, Symbol("explanation"), explanation)
        OpenAPI.validate_property(FirstLastNamePhoneCodedOut, Symbol("firstName"), firstName)
        OpenAPI.validate_property(FirstLastNamePhoneCodedOut, Symbol("lastName"), lastName)
        OpenAPI.validate_property(FirstLastNamePhoneCodedOut, Symbol("internationalPhoneNumberVerified"), internationalPhoneNumberVerified)
        OpenAPI.validate_property(FirstLastNamePhoneCodedOut, Symbol("phoneCountryIso2Verified"), phoneCountryIso2Verified)
        OpenAPI.validate_property(FirstLastNamePhoneCodedOut, Symbol("phoneCountryCode"), phoneCountryCode)
        OpenAPI.validate_property(FirstLastNamePhoneCodedOut, Symbol("phoneCountryCodeAlt"), phoneCountryCodeAlt)
        OpenAPI.validate_property(FirstLastNamePhoneCodedOut, Symbol("phoneCountryIso2"), phoneCountryIso2)
        OpenAPI.validate_property(FirstLastNamePhoneCodedOut, Symbol("phoneCountryIso2Alt"), phoneCountryIso2Alt)
        OpenAPI.validate_property(FirstLastNamePhoneCodedOut, Symbol("originCountryIso2"), originCountryIso2)
        OpenAPI.validate_property(FirstLastNamePhoneCodedOut, Symbol("originCountryIso2Alt"), originCountryIso2Alt)
        OpenAPI.validate_property(FirstLastNamePhoneCodedOut, Symbol("phoneNumber"), phoneNumber)
        OpenAPI.validate_property(FirstLastNamePhoneCodedOut, Symbol("verified"), verified)
        OpenAPI.validate_property(FirstLastNamePhoneCodedOut, Symbol("score"), score)
        OpenAPI.validate_property(FirstLastNamePhoneCodedOut, Symbol("countryIso2"), countryIso2)
        return new(script, id, explanation, firstName, lastName, internationalPhoneNumberVerified, phoneCountryIso2Verified, phoneCountryCode, phoneCountryCodeAlt, phoneCountryIso2, phoneCountryIso2Alt, originCountryIso2, originCountryIso2Alt, phoneNumber, verified, score, countryIso2, )
    end
end # type FirstLastNamePhoneCodedOut

const _property_types_FirstLastNamePhoneCodedOut = Dict{Symbol,String}(Symbol("script")=>"String", Symbol("id")=>"String", Symbol("explanation")=>"String", Symbol("firstName")=>"String", Symbol("lastName")=>"String", Symbol("internationalPhoneNumberVerified")=>"String", Symbol("phoneCountryIso2Verified")=>"String", Symbol("phoneCountryCode")=>"Int64", Symbol("phoneCountryCodeAlt")=>"Int64", Symbol("phoneCountryIso2")=>"String", Symbol("phoneCountryIso2Alt")=>"String", Symbol("originCountryIso2")=>"String", Symbol("originCountryIso2Alt")=>"String", Symbol("phoneNumber")=>"String", Symbol("verified")=>"Bool", Symbol("score")=>"Float64", Symbol("countryIso2")=>"String", )
OpenAPI.property_type(::Type{ FirstLastNamePhoneCodedOut }, name::Symbol) = Union{Nothing,eval(Base.Meta.parse(_property_types_FirstLastNamePhoneCodedOut[name]))}

function check_required(o::FirstLastNamePhoneCodedOut)
    true
end

function OpenAPI.validate_property(::Type{ FirstLastNamePhoneCodedOut }, name::Symbol, val)
    if name === Symbol("phoneCountryCode")
        OpenAPI.validate_param(name, "FirstLastNamePhoneCodedOut", :format, val, "int32")
    end
    if name === Symbol("phoneCountryCodeAlt")
        OpenAPI.validate_param(name, "FirstLastNamePhoneCodedOut", :format, val, "int32")
    end
    if name === Symbol("score")
        OpenAPI.validate_param(name, "FirstLastNamePhoneCodedOut", :format, val, "double")
    end
    if name === Symbol("score")
        OpenAPI.validate_param(name, "FirstLastNamePhoneCodedOut", :maximum, val, 100, false)
        OpenAPI.validate_param(name, "FirstLastNamePhoneCodedOut", :minimum, val, 0, false)
    end
end
