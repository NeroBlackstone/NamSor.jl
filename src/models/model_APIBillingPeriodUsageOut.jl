# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.


@doc raw"""APIBillingPeriodUsageOut
The current billing period.

    APIBillingPeriodUsageOut(;
        apiKey=nothing,
        subscriptionStarted=nothing,
        periodStarted=nothing,
        periodEnded=nothing,
        stripeCurrentPeriodEnd=nothing,
        stripeCurrentPeriodStart=nothing,
        billingStatus=nothing,
        usage=nothing,
        softLimit=nothing,
        hardLimit=nothing,
    )

    - apiKey::String : User API Key.
    - subscriptionStarted::Int64 : Datetime when the user subscribed to the plan.
    - periodStarted::Int64 : Datetime when the the plan&#39;s current period started.
    - periodEnded::Int64 : Datetime when the the plan&#39;s current period endend.
    - stripeCurrentPeriodEnd::Int64 : Datetime when the the plan&#39;s current period endend (in Stripe). Internal and Stripe periodicity should ~coincide.
    - stripeCurrentPeriodStart::Int64 : Datetime when the the plan&#39;s current period started (in Stripe). Internal and Stripe periodicity should ~coincide.
    - billingStatus::String : Current period billing status ex OPEN.
    - usage::Int64 : Current period usage in units (NB some API endpoints use more than one unit).
    - softLimit::Int64 : Current period soft limit (reaching the limit sends an email notification).
    - hardLimit::Int64 : Current period hard limit (reaching the limit sends an email notification and blocks the API Key).
"""
Base.@kwdef mutable struct APIBillingPeriodUsageOut <: OpenAPI.APIModel
    apiKey::Union{Nothing, String} = nothing
    subscriptionStarted::Union{Nothing, Int64} = nothing
    periodStarted::Union{Nothing, Int64} = nothing
    periodEnded::Union{Nothing, Int64} = nothing
    stripeCurrentPeriodEnd::Union{Nothing, Int64} = nothing
    stripeCurrentPeriodStart::Union{Nothing, Int64} = nothing
    billingStatus::Union{Nothing, String} = nothing
    usage::Union{Nothing, Int64} = nothing
    softLimit::Union{Nothing, Int64} = nothing
    hardLimit::Union{Nothing, Int64} = nothing

    function APIBillingPeriodUsageOut(apiKey, subscriptionStarted, periodStarted, periodEnded, stripeCurrentPeriodEnd, stripeCurrentPeriodStart, billingStatus, usage, softLimit, hardLimit, )
        OpenAPI.validate_property(APIBillingPeriodUsageOut, Symbol("apiKey"), apiKey)
        OpenAPI.validate_property(APIBillingPeriodUsageOut, Symbol("subscriptionStarted"), subscriptionStarted)
        OpenAPI.validate_property(APIBillingPeriodUsageOut, Symbol("periodStarted"), periodStarted)
        OpenAPI.validate_property(APIBillingPeriodUsageOut, Symbol("periodEnded"), periodEnded)
        OpenAPI.validate_property(APIBillingPeriodUsageOut, Symbol("stripeCurrentPeriodEnd"), stripeCurrentPeriodEnd)
        OpenAPI.validate_property(APIBillingPeriodUsageOut, Symbol("stripeCurrentPeriodStart"), stripeCurrentPeriodStart)
        OpenAPI.validate_property(APIBillingPeriodUsageOut, Symbol("billingStatus"), billingStatus)
        OpenAPI.validate_property(APIBillingPeriodUsageOut, Symbol("usage"), usage)
        OpenAPI.validate_property(APIBillingPeriodUsageOut, Symbol("softLimit"), softLimit)
        OpenAPI.validate_property(APIBillingPeriodUsageOut, Symbol("hardLimit"), hardLimit)
        return new(apiKey, subscriptionStarted, periodStarted, periodEnded, stripeCurrentPeriodEnd, stripeCurrentPeriodStart, billingStatus, usage, softLimit, hardLimit, )
    end
end # type APIBillingPeriodUsageOut

const _property_types_APIBillingPeriodUsageOut = Dict{Symbol,String}(Symbol("apiKey")=>"String", Symbol("subscriptionStarted")=>"Int64", Symbol("periodStarted")=>"Int64", Symbol("periodEnded")=>"Int64", Symbol("stripeCurrentPeriodEnd")=>"Int64", Symbol("stripeCurrentPeriodStart")=>"Int64", Symbol("billingStatus")=>"String", Symbol("usage")=>"Int64", Symbol("softLimit")=>"Int64", Symbol("hardLimit")=>"Int64", )
OpenAPI.property_type(::Type{ APIBillingPeriodUsageOut }, name::Symbol) = Union{Nothing,eval(Base.Meta.parse(_property_types_APIBillingPeriodUsageOut[name]))}

function check_required(o::APIBillingPeriodUsageOut)
    true
end

function OpenAPI.validate_property(::Type{ APIBillingPeriodUsageOut }, name::Symbol, val)
    if name === Symbol("subscriptionStarted")
        OpenAPI.validate_param(name, "APIBillingPeriodUsageOut", :format, val, "int64")
    end
    if name === Symbol("periodStarted")
        OpenAPI.validate_param(name, "APIBillingPeriodUsageOut", :format, val, "int64")
    end
    if name === Symbol("periodEnded")
        OpenAPI.validate_param(name, "APIBillingPeriodUsageOut", :format, val, "int64")
    end
    if name === Symbol("stripeCurrentPeriodEnd")
        OpenAPI.validate_param(name, "APIBillingPeriodUsageOut", :format, val, "int64")
    end
    if name === Symbol("stripeCurrentPeriodStart")
        OpenAPI.validate_param(name, "APIBillingPeriodUsageOut", :format, val, "int64")
    end
    if name === Symbol("usage")
        OpenAPI.validate_param(name, "APIBillingPeriodUsageOut", :format, val, "int64")
    end
    if name === Symbol("softLimit")
        OpenAPI.validate_param(name, "APIBillingPeriodUsageOut", :format, val, "int64")
    end
    if name === Symbol("hardLimit")
        OpenAPI.validate_param(name, "APIBillingPeriodUsageOut", :format, val, "int64")
    end
end
