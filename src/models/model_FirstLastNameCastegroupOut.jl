# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.


@doc raw"""FirstLastNameCastegroupOut
Represents the output of inferring the LIKELY caste group from a personal Hindu/Indian name.

    FirstLastNameCastegroupOut(;
        script=nothing,
        id=nothing,
        explanation=nothing,
        firstName=nothing,
        lastName=nothing,
        castegroup=nothing,
        castegroupAlt=nothing,
        castegroupTop=nothing,
        score=nothing,
        probabilityCalibrated=nothing,
        probabilityAltCalibrated=nothing,
    )

    - script::String
    - id::String
    - explanation::String
    - firstName::String : The first name (also known as given name)
    - lastName::String : The last name (also known as family name, or surname)
    - castegroup::String : Most likely caste group
    - castegroupAlt::String : Second best alternative : caste group 
    - castegroupTop::Vector{String} : List caste group (top 10)
    - score::Float64 : Compatibility to NamSor_v1 Origin score value. Higher score is better, but score is not normalized. Use calibratedProbability if available. 
    - probabilityCalibrated::Float64 : The calibrated probability for caste to have been guessed correctly. -1 &#x3D; still calibrating. 
    - probabilityAltCalibrated::Float64 : The calibrated probability for caste OR casteAlt to have been guessed correctly. -1 &#x3D; still calibrating. 
"""
Base.@kwdef mutable struct FirstLastNameCastegroupOut <: OpenAPI.APIModel
    script::Union{Nothing, String} = nothing
    id::Union{Nothing, String} = nothing
    explanation::Union{Nothing, String} = nothing
    firstName::Union{Nothing, String} = nothing
    lastName::Union{Nothing, String} = nothing
    castegroup::Union{Nothing, String} = nothing
    castegroupAlt::Union{Nothing, String} = nothing
    castegroupTop::Union{Nothing, Vector{String}} = nothing
    score::Union{Nothing, Float64} = nothing
    probabilityCalibrated::Union{Nothing, Float64} = nothing
    probabilityAltCalibrated::Union{Nothing, Float64} = nothing

    function FirstLastNameCastegroupOut(script, id, explanation, firstName, lastName, castegroup, castegroupAlt, castegroupTop, score, probabilityCalibrated, probabilityAltCalibrated, )
        OpenAPI.validate_property(FirstLastNameCastegroupOut, Symbol("script"), script)
        OpenAPI.validate_property(FirstLastNameCastegroupOut, Symbol("id"), id)
        OpenAPI.validate_property(FirstLastNameCastegroupOut, Symbol("explanation"), explanation)
        OpenAPI.validate_property(FirstLastNameCastegroupOut, Symbol("firstName"), firstName)
        OpenAPI.validate_property(FirstLastNameCastegroupOut, Symbol("lastName"), lastName)
        OpenAPI.validate_property(FirstLastNameCastegroupOut, Symbol("castegroup"), castegroup)
        OpenAPI.validate_property(FirstLastNameCastegroupOut, Symbol("castegroupAlt"), castegroupAlt)
        OpenAPI.validate_property(FirstLastNameCastegroupOut, Symbol("castegroupTop"), castegroupTop)
        OpenAPI.validate_property(FirstLastNameCastegroupOut, Symbol("score"), score)
        OpenAPI.validate_property(FirstLastNameCastegroupOut, Symbol("probabilityCalibrated"), probabilityCalibrated)
        OpenAPI.validate_property(FirstLastNameCastegroupOut, Symbol("probabilityAltCalibrated"), probabilityAltCalibrated)
        return new(script, id, explanation, firstName, lastName, castegroup, castegroupAlt, castegroupTop, score, probabilityCalibrated, probabilityAltCalibrated, )
    end
end # type FirstLastNameCastegroupOut

const _property_types_FirstLastNameCastegroupOut = Dict{Symbol,String}(Symbol("script")=>"String", Symbol("id")=>"String", Symbol("explanation")=>"String", Symbol("firstName")=>"String", Symbol("lastName")=>"String", Symbol("castegroup")=>"String", Symbol("castegroupAlt")=>"String", Symbol("castegroupTop")=>"Vector{String}", Symbol("score")=>"Float64", Symbol("probabilityCalibrated")=>"Float64", Symbol("probabilityAltCalibrated")=>"Float64", )
OpenAPI.property_type(::Type{ FirstLastNameCastegroupOut }, name::Symbol) = Union{Nothing,eval(Base.Meta.parse(_property_types_FirstLastNameCastegroupOut[name]))}

function check_required(o::FirstLastNameCastegroupOut)
    true
end

function OpenAPI.validate_property(::Type{ FirstLastNameCastegroupOut }, name::Symbol, val)
    if name === Symbol("score")
        OpenAPI.validate_param(name, "FirstLastNameCastegroupOut", :format, val, "double")
    end
    if name === Symbol("score")
        OpenAPI.validate_param(name, "FirstLastNameCastegroupOut", :maximum, val, 100, false)
        OpenAPI.validate_param(name, "FirstLastNameCastegroupOut", :minimum, val, 0, false)
    end
    if name === Symbol("probabilityCalibrated")
        OpenAPI.validate_param(name, "FirstLastNameCastegroupOut", :format, val, "double")
    end
    if name === Symbol("probabilityCalibrated")
        OpenAPI.validate_param(name, "FirstLastNameCastegroupOut", :maximum, val, 1, false)
        OpenAPI.validate_param(name, "FirstLastNameCastegroupOut", :minimum, val, -1, false)
    end
    if name === Symbol("probabilityAltCalibrated")
        OpenAPI.validate_param(name, "FirstLastNameCastegroupOut", :format, val, "double")
    end
    if name === Symbol("probabilityAltCalibrated")
        OpenAPI.validate_param(name, "FirstLastNameCastegroupOut", :maximum, val, 1, false)
        OpenAPI.validate_param(name, "FirstLastNameCastegroupOut", :minimum, val, -1, false)
    end
end
