# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.


@doc raw"""PersonalNameGeoSubdivisionIn

    PersonalNameGeoSubdivisionIn(;
        id=nothing,
        name=nothing,
        countryIso2=nothing,
        subdivisionIso=nothing,
    )

    - id::String
    - name::String
    - countryIso2::String
    - subdivisionIso::String
"""
Base.@kwdef mutable struct PersonalNameGeoSubdivisionIn <: OpenAPI.APIModel
    id::Union{Nothing, String} = nothing
    name::Union{Nothing, String} = nothing
    countryIso2::Union{Nothing, String} = nothing
    subdivisionIso::Union{Nothing, String} = nothing

    function PersonalNameGeoSubdivisionIn(id, name, countryIso2, subdivisionIso, )
        OpenAPI.validate_property(PersonalNameGeoSubdivisionIn, Symbol("id"), id)
        OpenAPI.validate_property(PersonalNameGeoSubdivisionIn, Symbol("name"), name)
        OpenAPI.validate_property(PersonalNameGeoSubdivisionIn, Symbol("countryIso2"), countryIso2)
        OpenAPI.validate_property(PersonalNameGeoSubdivisionIn, Symbol("subdivisionIso"), subdivisionIso)
        return new(id, name, countryIso2, subdivisionIso, )
    end
end # type PersonalNameGeoSubdivisionIn

const _property_types_PersonalNameGeoSubdivisionIn = Dict{Symbol,String}(Symbol("id")=>"String", Symbol("name")=>"String", Symbol("countryIso2")=>"String", Symbol("subdivisionIso")=>"String", )
OpenAPI.property_type(::Type{ PersonalNameGeoSubdivisionIn }, name::Symbol) = Union{Nothing,eval(Base.Meta.parse(_property_types_PersonalNameGeoSubdivisionIn[name]))}

function check_required(o::PersonalNameGeoSubdivisionIn)
    true
end

function OpenAPI.validate_property(::Type{ PersonalNameGeoSubdivisionIn }, name::Symbol, val)
end
