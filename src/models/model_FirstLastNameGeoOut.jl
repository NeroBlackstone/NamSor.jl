# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.


@doc raw"""FirstLastNameGeoOut
Represents the output of inferring the LIKELY country of Origin from a personal name.

    FirstLastNameGeoOut(;
        script=nothing,
        id=nothing,
        explanation=nothing,
        firstName=nothing,
        lastName=nothing,
        score=nothing,
        country=nothing,
        countryAlt=nothing,
        region=nothing,
        topRegion=nothing,
        subRegion=nothing,
        countriesTop=nothing,
        probabilityCalibrated=nothing,
        probabilityAltCalibrated=nothing,
        religionStats=nothing,
        religionStatsAlt=nothing,
    )

    - script::String
    - id::String
    - explanation::String
    - firstName::String : The first name (also known as given name)
    - lastName::String : The last name (also known as family name, or surname)
    - score::Float64 : Higher score is better, but score is not normalized. Use calibratedProbability if available. 
    - country::String : Most likely country 
    - countryAlt::String : Second best alternative : country 
    - region::String : Most likely region (based on country ISO2 code)
    - topRegion::String : Most likely top region (based on country ISO2 code)
    - subRegion::String : Most likely sub region (based on country ISO2 code)
    - countriesTop::Vector{String} : List countries (top 10)
    - probabilityCalibrated::Float64 : The calibrated probability for country to have been guessed correctly. -1 &#x3D; still calibrating. 
    - probabilityAltCalibrated::Float64 : The calibrated probability for country OR countryAlt to have been guessed correctly. -1 &#x3D; still calibrating. 
    - religionStats::Vector{ReligionStatOut} : Geographic religious statistics, assuming country is correctly predicted.
    - religionStatsAlt::Vector{ReligionStatOut} : Geographic religious statistics, for country best alternative.
"""
Base.@kwdef mutable struct FirstLastNameGeoOut <: OpenAPI.APIModel
    script::Union{Nothing, String} = nothing
    id::Union{Nothing, String} = nothing
    explanation::Union{Nothing, String} = nothing
    firstName::Union{Nothing, String} = nothing
    lastName::Union{Nothing, String} = nothing
    score::Union{Nothing, Float64} = nothing
    country::Union{Nothing, String} = nothing
    countryAlt::Union{Nothing, String} = nothing
    region::Union{Nothing, String} = nothing
    topRegion::Union{Nothing, String} = nothing
    subRegion::Union{Nothing, String} = nothing
    countriesTop::Union{Nothing, Vector{String}} = nothing
    probabilityCalibrated::Union{Nothing, Float64} = nothing
    probabilityAltCalibrated::Union{Nothing, Float64} = nothing
    religionStats::Union{Nothing, Vector} = nothing # spec type: Union{ Nothing, Vector{ReligionStatOut} }
    religionStatsAlt::Union{Nothing, Vector} = nothing # spec type: Union{ Nothing, Vector{ReligionStatOut} }

    function FirstLastNameGeoOut(script, id, explanation, firstName, lastName, score, country, countryAlt, region, topRegion, subRegion, countriesTop, probabilityCalibrated, probabilityAltCalibrated, religionStats, religionStatsAlt, )
        OpenAPI.validate_property(FirstLastNameGeoOut, Symbol("script"), script)
        OpenAPI.validate_property(FirstLastNameGeoOut, Symbol("id"), id)
        OpenAPI.validate_property(FirstLastNameGeoOut, Symbol("explanation"), explanation)
        OpenAPI.validate_property(FirstLastNameGeoOut, Symbol("firstName"), firstName)
        OpenAPI.validate_property(FirstLastNameGeoOut, Symbol("lastName"), lastName)
        OpenAPI.validate_property(FirstLastNameGeoOut, Symbol("score"), score)
        OpenAPI.validate_property(FirstLastNameGeoOut, Symbol("country"), country)
        OpenAPI.validate_property(FirstLastNameGeoOut, Symbol("countryAlt"), countryAlt)
        OpenAPI.validate_property(FirstLastNameGeoOut, Symbol("region"), region)
        OpenAPI.validate_property(FirstLastNameGeoOut, Symbol("topRegion"), topRegion)
        OpenAPI.validate_property(FirstLastNameGeoOut, Symbol("subRegion"), subRegion)
        OpenAPI.validate_property(FirstLastNameGeoOut, Symbol("countriesTop"), countriesTop)
        OpenAPI.validate_property(FirstLastNameGeoOut, Symbol("probabilityCalibrated"), probabilityCalibrated)
        OpenAPI.validate_property(FirstLastNameGeoOut, Symbol("probabilityAltCalibrated"), probabilityAltCalibrated)
        OpenAPI.validate_property(FirstLastNameGeoOut, Symbol("religionStats"), religionStats)
        OpenAPI.validate_property(FirstLastNameGeoOut, Symbol("religionStatsAlt"), religionStatsAlt)
        return new(script, id, explanation, firstName, lastName, score, country, countryAlt, region, topRegion, subRegion, countriesTop, probabilityCalibrated, probabilityAltCalibrated, religionStats, religionStatsAlt, )
    end
end # type FirstLastNameGeoOut

const _property_types_FirstLastNameGeoOut = Dict{Symbol,String}(Symbol("script")=>"String", Symbol("id")=>"String", Symbol("explanation")=>"String", Symbol("firstName")=>"String", Symbol("lastName")=>"String", Symbol("score")=>"Float64", Symbol("country")=>"String", Symbol("countryAlt")=>"String", Symbol("region")=>"String", Symbol("topRegion")=>"String", Symbol("subRegion")=>"String", Symbol("countriesTop")=>"Vector{String}", Symbol("probabilityCalibrated")=>"Float64", Symbol("probabilityAltCalibrated")=>"Float64", Symbol("religionStats")=>"Vector{ReligionStatOut}", Symbol("religionStatsAlt")=>"Vector{ReligionStatOut}", )
OpenAPI.property_type(::Type{ FirstLastNameGeoOut }, name::Symbol) = Union{Nothing,eval(Base.Meta.parse(_property_types_FirstLastNameGeoOut[name]))}

function check_required(o::FirstLastNameGeoOut)
    true
end

function OpenAPI.validate_property(::Type{ FirstLastNameGeoOut }, name::Symbol, val)
    if name === Symbol("score")
        OpenAPI.validate_param(name, "FirstLastNameGeoOut", :format, val, "double")
    end
    if name === Symbol("score")
        OpenAPI.validate_param(name, "FirstLastNameGeoOut", :maximum, val, 100, false)
        OpenAPI.validate_param(name, "FirstLastNameGeoOut", :minimum, val, 0, false)
    end
    if name === Symbol("probabilityCalibrated")
        OpenAPI.validate_param(name, "FirstLastNameGeoOut", :format, val, "double")
    end
    if name === Symbol("probabilityCalibrated")
        OpenAPI.validate_param(name, "FirstLastNameGeoOut", :maximum, val, 1, false)
        OpenAPI.validate_param(name, "FirstLastNameGeoOut", :minimum, val, -1, false)
    end
    if name === Symbol("probabilityAltCalibrated")
        OpenAPI.validate_param(name, "FirstLastNameGeoOut", :format, val, "double")
    end
    if name === Symbol("probabilityAltCalibrated")
        OpenAPI.validate_param(name, "FirstLastNameGeoOut", :maximum, val, 1, false)
        OpenAPI.validate_param(name, "FirstLastNameGeoOut", :minimum, val, -1, false)
    end
end
