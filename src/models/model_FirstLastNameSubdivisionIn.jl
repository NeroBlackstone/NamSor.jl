# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.


@doc raw"""FirstLastNameSubdivisionIn

    FirstLastNameSubdivisionIn(;
        id=nothing,
        firstName=nothing,
        lastName=nothing,
        subdivisionIso=nothing,
    )

    - id::String
    - firstName::String
    - lastName::String
    - subdivisionIso::String
"""
Base.@kwdef mutable struct FirstLastNameSubdivisionIn <: OpenAPI.APIModel
    id::Union{Nothing, String} = nothing
    firstName::Union{Nothing, String} = nothing
    lastName::Union{Nothing, String} = nothing
    subdivisionIso::Union{Nothing, String} = nothing

    function FirstLastNameSubdivisionIn(id, firstName, lastName, subdivisionIso, )
        OpenAPI.validate_property(FirstLastNameSubdivisionIn, Symbol("id"), id)
        OpenAPI.validate_property(FirstLastNameSubdivisionIn, Symbol("firstName"), firstName)
        OpenAPI.validate_property(FirstLastNameSubdivisionIn, Symbol("lastName"), lastName)
        OpenAPI.validate_property(FirstLastNameSubdivisionIn, Symbol("subdivisionIso"), subdivisionIso)
        return new(id, firstName, lastName, subdivisionIso, )
    end
end # type FirstLastNameSubdivisionIn

const _property_types_FirstLastNameSubdivisionIn = Dict{Symbol,String}(Symbol("id")=>"String", Symbol("firstName")=>"String", Symbol("lastName")=>"String", Symbol("subdivisionIso")=>"String", )
OpenAPI.property_type(::Type{ FirstLastNameSubdivisionIn }, name::Symbol) = Union{Nothing,eval(Base.Meta.parse(_property_types_FirstLastNameSubdivisionIn[name]))}

function check_required(o::FirstLastNameSubdivisionIn)
    true
end

function OpenAPI.validate_property(::Type{ FirstLastNameSubdivisionIn }, name::Symbol, val)
end
