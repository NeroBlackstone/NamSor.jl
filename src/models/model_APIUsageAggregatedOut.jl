# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.


@doc raw"""APIUsageAggregatedOut

    APIUsageAggregatedOut(;
        timeUnit=nothing,
        periodStart=nothing,
        periodEnd=nothing,
        totalUsage=nothing,
        historyTruncated=nothing,
        data=nothing,
        colHeaders=nothing,
        rowHeaders=nothing,
    )

    - timeUnit::String : Time unit is DAY, WEEK or MONTH depending on prior usage
    - periodStart::Int64 : Start datetime of the reporting period
    - periodEnd::Int64 : End datetime of the reporting period
    - totalUsage::Int64 : Total usage in the current period
    - historyTruncated::Bool : If the history was truncaded due to data limit
    - data::Vector{Vector{Int64}} : Data points : usage per DAY, WEEK or MONTH and per apiService
    - colHeaders::Vector{String} : apiServices as column headers 
    - rowHeaders::Vector{String} : dates as row headers 
"""
Base.@kwdef mutable struct APIUsageAggregatedOut <: OpenAPI.APIModel
    timeUnit::Union{Nothing, String} = nothing
    periodStart::Union{Nothing, Int64} = nothing
    periodEnd::Union{Nothing, Int64} = nothing
    totalUsage::Union{Nothing, Int64} = nothing
    historyTruncated::Union{Nothing, Bool} = nothing
    data::Union{Nothing, Vector{Vector{Int64}}} = nothing
    colHeaders::Union{Nothing, Vector{String}} = nothing
    rowHeaders::Union{Nothing, Vector{String}} = nothing

    function APIUsageAggregatedOut(timeUnit, periodStart, periodEnd, totalUsage, historyTruncated, data, colHeaders, rowHeaders, )
        OpenAPI.validate_property(APIUsageAggregatedOut, Symbol("timeUnit"), timeUnit)
        OpenAPI.validate_property(APIUsageAggregatedOut, Symbol("periodStart"), periodStart)
        OpenAPI.validate_property(APIUsageAggregatedOut, Symbol("periodEnd"), periodEnd)
        OpenAPI.validate_property(APIUsageAggregatedOut, Symbol("totalUsage"), totalUsage)
        OpenAPI.validate_property(APIUsageAggregatedOut, Symbol("historyTruncated"), historyTruncated)
        OpenAPI.validate_property(APIUsageAggregatedOut, Symbol("data"), data)
        OpenAPI.validate_property(APIUsageAggregatedOut, Symbol("colHeaders"), colHeaders)
        OpenAPI.validate_property(APIUsageAggregatedOut, Symbol("rowHeaders"), rowHeaders)
        return new(timeUnit, periodStart, periodEnd, totalUsage, historyTruncated, data, colHeaders, rowHeaders, )
    end
end # type APIUsageAggregatedOut

const _property_types_APIUsageAggregatedOut = Dict{Symbol,String}(Symbol("timeUnit")=>"String", Symbol("periodStart")=>"Int64", Symbol("periodEnd")=>"Int64", Symbol("totalUsage")=>"Int64", Symbol("historyTruncated")=>"Bool", Symbol("data")=>"Vector{Vector{Int64}}", Symbol("colHeaders")=>"Vector{String}", Symbol("rowHeaders")=>"Vector{String}", )
OpenAPI.property_type(::Type{ APIUsageAggregatedOut }, name::Symbol) = Union{Nothing,eval(Base.Meta.parse(_property_types_APIUsageAggregatedOut[name]))}

function check_required(o::APIUsageAggregatedOut)
    true
end

function OpenAPI.validate_property(::Type{ APIUsageAggregatedOut }, name::Symbol, val)
    if name === Symbol("periodStart")
        OpenAPI.validate_param(name, "APIUsageAggregatedOut", :format, val, "int64")
    end
    if name === Symbol("periodEnd")
        OpenAPI.validate_param(name, "APIUsageAggregatedOut", :format, val, "int64")
    end
    if name === Symbol("totalUsage")
        OpenAPI.validate_param(name, "APIUsageAggregatedOut", :format, val, "int64")
    end
end
