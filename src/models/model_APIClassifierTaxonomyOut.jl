# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.


@doc raw"""APIClassifierTaxonomyOut

    APIClassifierTaxonomyOut(;
        classifierName=nothing,
        taxonomyClasses=nothing,
        classifyingScripts=nothing,
    )

    - classifierName::String : Name of the classifier as per apiStatus (corresponds also to the name of the service in apiServices)
    - taxonomyClasses::Vector{String} : The taxonomy classes this classifier classifies to
    - classifyingScripts::Vector{String} : The scripts / alphabets this classifiers classifies to
"""
Base.@kwdef mutable struct APIClassifierTaxonomyOut <: OpenAPI.APIModel
    classifierName::Union{Nothing, String} = nothing
    taxonomyClasses::Union{Nothing, Vector{String}} = nothing
    classifyingScripts::Union{Nothing, Vector{String}} = nothing

    function APIClassifierTaxonomyOut(classifierName, taxonomyClasses, classifyingScripts, )
        OpenAPI.validate_property(APIClassifierTaxonomyOut, Symbol("classifierName"), classifierName)
        OpenAPI.validate_property(APIClassifierTaxonomyOut, Symbol("taxonomyClasses"), taxonomyClasses)
        OpenAPI.validate_property(APIClassifierTaxonomyOut, Symbol("classifyingScripts"), classifyingScripts)
        return new(classifierName, taxonomyClasses, classifyingScripts, )
    end
end # type APIClassifierTaxonomyOut

const _property_types_APIClassifierTaxonomyOut = Dict{Symbol,String}(Symbol("classifierName")=>"String", Symbol("taxonomyClasses")=>"Vector{String}", Symbol("classifyingScripts")=>"Vector{String}", )
OpenAPI.property_type(::Type{ APIClassifierTaxonomyOut }, name::Symbol) = Union{Nothing,eval(Base.Meta.parse(_property_types_APIClassifierTaxonomyOut[name]))}

function check_required(o::APIClassifierTaxonomyOut)
    true
end

function OpenAPI.validate_property(::Type{ APIClassifierTaxonomyOut }, name::Symbol, val)
end
