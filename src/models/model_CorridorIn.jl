# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.


@doc raw"""CorridorIn
Represent any transnational interaction between names (ex. remittance, communication, cross-border investment, airline travel

    CorridorIn(;
        id=nothing,
        firstLastNameGeoFrom=nothing,
        firstLastNameGeoTo=nothing,
    )

    - id::String
    - firstLastNameGeoFrom::FirstLastNameGeoIn
    - firstLastNameGeoTo::FirstLastNameGeoIn
"""
Base.@kwdef mutable struct CorridorIn <: OpenAPI.APIModel
    id::Union{Nothing, String} = nothing
    firstLastNameGeoFrom = nothing # spec type: Union{ Nothing, FirstLastNameGeoIn }
    firstLastNameGeoTo = nothing # spec type: Union{ Nothing, FirstLastNameGeoIn }

    function CorridorIn(id, firstLastNameGeoFrom, firstLastNameGeoTo, )
        OpenAPI.validate_property(CorridorIn, Symbol("id"), id)
        OpenAPI.validate_property(CorridorIn, Symbol("firstLastNameGeoFrom"), firstLastNameGeoFrom)
        OpenAPI.validate_property(CorridorIn, Symbol("firstLastNameGeoTo"), firstLastNameGeoTo)
        return new(id, firstLastNameGeoFrom, firstLastNameGeoTo, )
    end
end # type CorridorIn

const _property_types_CorridorIn = Dict{Symbol,String}(Symbol("id")=>"String", Symbol("firstLastNameGeoFrom")=>"FirstLastNameGeoIn", Symbol("firstLastNameGeoTo")=>"FirstLastNameGeoIn", )
OpenAPI.property_type(::Type{ CorridorIn }, name::Symbol) = Union{Nothing,eval(Base.Meta.parse(_property_types_CorridorIn[name]))}

function check_required(o::CorridorIn)
    true
end

function OpenAPI.validate_property(::Type{ CorridorIn }, name::Symbol, val)
end
