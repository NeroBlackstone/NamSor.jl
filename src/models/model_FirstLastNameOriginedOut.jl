# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.


@doc raw"""FirstLastNameOriginedOut
Represents the output of inferring the LIKELY country of Origin from a personal name.

    FirstLastNameOriginedOut(;
        script=nothing,
        id=nothing,
        explanation=nothing,
        firstName=nothing,
        lastName=nothing,
        countryOrigin=nothing,
        countryOriginAlt=nothing,
        countriesOriginTop=nothing,
        score=nothing,
        regionOrigin=nothing,
        topRegionOrigin=nothing,
        subRegionOrigin=nothing,
        probabilityCalibrated=nothing,
        probabilityAltCalibrated=nothing,
        religionStats=nothing,
        religionStatsAlt=nothing,
    )

    - script::String
    - id::String
    - explanation::String
    - firstName::String : The first name (also known as given name)
    - lastName::String : The last name (also known as family name, or surname)
    - countryOrigin::String : Most likely country of Origin
    - countryOriginAlt::String : Second best alternative : country of Origin
    - countriesOriginTop::Vector{String} : List countries of Origin (top 10)
    - score::Float64 : Compatibility to NamSor_v1 Origin score value. Higher score is better, but score is not normalized. Use calibratedProbability if available. 
    - regionOrigin::String : Most likely region of Origin (based on countryOrigin ISO2 code)
    - topRegionOrigin::String : Most likely top region of Origin (based on countryOrigin ISO2 code)
    - subRegionOrigin::String : Most likely sub region of Origin (based on countryOrigin ISO2 code)
    - probabilityCalibrated::Float64 : The calibrated probability for countryOrigin to have been guessed correctly. -1 &#x3D; still calibrating. 
    - probabilityAltCalibrated::Float64 : The calibrated probability for countryOrigin OR countryOriginAlt to have been guessed correctly. -1 &#x3D; still calibrating. 
    - religionStats::Vector{ReligionStatOut} : Geographic religious statistics, assuming country of origin is correctly predicted.
    - religionStatsAlt::Vector{ReligionStatOut} : Geographic religious statistics, for origin best alternative.
"""
Base.@kwdef mutable struct FirstLastNameOriginedOut <: OpenAPI.APIModel
    script::Union{Nothing, String} = nothing
    id::Union{Nothing, String} = nothing
    explanation::Union{Nothing, String} = nothing
    firstName::Union{Nothing, String} = nothing
    lastName::Union{Nothing, String} = nothing
    countryOrigin::Union{Nothing, String} = nothing
    countryOriginAlt::Union{Nothing, String} = nothing
    countriesOriginTop::Union{Nothing, Vector{String}} = nothing
    score::Union{Nothing, Float64} = nothing
    regionOrigin::Union{Nothing, String} = nothing
    topRegionOrigin::Union{Nothing, String} = nothing
    subRegionOrigin::Union{Nothing, String} = nothing
    probabilityCalibrated::Union{Nothing, Float64} = nothing
    probabilityAltCalibrated::Union{Nothing, Float64} = nothing
    religionStats::Union{Nothing, Vector} = nothing # spec type: Union{ Nothing, Vector{ReligionStatOut} }
    religionStatsAlt::Union{Nothing, Vector} = nothing # spec type: Union{ Nothing, Vector{ReligionStatOut} }

    function FirstLastNameOriginedOut(script, id, explanation, firstName, lastName, countryOrigin, countryOriginAlt, countriesOriginTop, score, regionOrigin, topRegionOrigin, subRegionOrigin, probabilityCalibrated, probabilityAltCalibrated, religionStats, religionStatsAlt, )
        OpenAPI.validate_property(FirstLastNameOriginedOut, Symbol("script"), script)
        OpenAPI.validate_property(FirstLastNameOriginedOut, Symbol("id"), id)
        OpenAPI.validate_property(FirstLastNameOriginedOut, Symbol("explanation"), explanation)
        OpenAPI.validate_property(FirstLastNameOriginedOut, Symbol("firstName"), firstName)
        OpenAPI.validate_property(FirstLastNameOriginedOut, Symbol("lastName"), lastName)
        OpenAPI.validate_property(FirstLastNameOriginedOut, Symbol("countryOrigin"), countryOrigin)
        OpenAPI.validate_property(FirstLastNameOriginedOut, Symbol("countryOriginAlt"), countryOriginAlt)
        OpenAPI.validate_property(FirstLastNameOriginedOut, Symbol("countriesOriginTop"), countriesOriginTop)
        OpenAPI.validate_property(FirstLastNameOriginedOut, Symbol("score"), score)
        OpenAPI.validate_property(FirstLastNameOriginedOut, Symbol("regionOrigin"), regionOrigin)
        OpenAPI.validate_property(FirstLastNameOriginedOut, Symbol("topRegionOrigin"), topRegionOrigin)
        OpenAPI.validate_property(FirstLastNameOriginedOut, Symbol("subRegionOrigin"), subRegionOrigin)
        OpenAPI.validate_property(FirstLastNameOriginedOut, Symbol("probabilityCalibrated"), probabilityCalibrated)
        OpenAPI.validate_property(FirstLastNameOriginedOut, Symbol("probabilityAltCalibrated"), probabilityAltCalibrated)
        OpenAPI.validate_property(FirstLastNameOriginedOut, Symbol("religionStats"), religionStats)
        OpenAPI.validate_property(FirstLastNameOriginedOut, Symbol("religionStatsAlt"), religionStatsAlt)
        return new(script, id, explanation, firstName, lastName, countryOrigin, countryOriginAlt, countriesOriginTop, score, regionOrigin, topRegionOrigin, subRegionOrigin, probabilityCalibrated, probabilityAltCalibrated, religionStats, religionStatsAlt, )
    end
end # type FirstLastNameOriginedOut

const _property_types_FirstLastNameOriginedOut = Dict{Symbol,String}(Symbol("script")=>"String", Symbol("id")=>"String", Symbol("explanation")=>"String", Symbol("firstName")=>"String", Symbol("lastName")=>"String", Symbol("countryOrigin")=>"String", Symbol("countryOriginAlt")=>"String", Symbol("countriesOriginTop")=>"Vector{String}", Symbol("score")=>"Float64", Symbol("regionOrigin")=>"String", Symbol("topRegionOrigin")=>"String", Symbol("subRegionOrigin")=>"String", Symbol("probabilityCalibrated")=>"Float64", Symbol("probabilityAltCalibrated")=>"Float64", Symbol("religionStats")=>"Vector{ReligionStatOut}", Symbol("religionStatsAlt")=>"Vector{ReligionStatOut}", )
OpenAPI.property_type(::Type{ FirstLastNameOriginedOut }, name::Symbol) = Union{Nothing,eval(Base.Meta.parse(_property_types_FirstLastNameOriginedOut[name]))}

function check_required(o::FirstLastNameOriginedOut)
    true
end

function OpenAPI.validate_property(::Type{ FirstLastNameOriginedOut }, name::Symbol, val)
    if name === Symbol("score")
        OpenAPI.validate_param(name, "FirstLastNameOriginedOut", :format, val, "double")
    end
    if name === Symbol("score")
        OpenAPI.validate_param(name, "FirstLastNameOriginedOut", :maximum, val, 100, false)
        OpenAPI.validate_param(name, "FirstLastNameOriginedOut", :minimum, val, 0, false)
    end
    if name === Symbol("probabilityCalibrated")
        OpenAPI.validate_param(name, "FirstLastNameOriginedOut", :format, val, "double")
    end
    if name === Symbol("probabilityCalibrated")
        OpenAPI.validate_param(name, "FirstLastNameOriginedOut", :maximum, val, 1, false)
        OpenAPI.validate_param(name, "FirstLastNameOriginedOut", :minimum, val, -1, false)
    end
    if name === Symbol("probabilityAltCalibrated")
        OpenAPI.validate_param(name, "FirstLastNameOriginedOut", :format, val, "double")
    end
    if name === Symbol("probabilityAltCalibrated")
        OpenAPI.validate_param(name, "FirstLastNameOriginedOut", :maximum, val, 1, false)
        OpenAPI.validate_param(name, "FirstLastNameOriginedOut", :minimum, val, -1, false)
    end
end
