# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.


@doc raw"""FirstLastNameGeoSubclassificationOut
Represents the geographic name origin at a country subclassification level (usually regional or state level).

    FirstLastNameGeoSubclassificationOut(;
        script=nothing,
        id=nothing,
        explanation=nothing,
        firstName=nothing,
        lastName=nothing,
        countryIso2=nothing,
        subClassification=nothing,
        subClassificationAlt=nothing,
        subclassificationTop=nothing,
        score=nothing,
        probabilityCalibrated=nothing,
        probabilityAltCalibrated=nothing,
    )

    - script::String
    - id::String
    - explanation::String
    - firstName::String : The first name (also known as given name)
    - lastName::String : The last name (also known as family name, or surname)
    - countryIso2::String : The input country ISO2 code
    - subClassification::String : Most likely subclassification ISO_3166-2 code
    - subClassificationAlt::String : Second best alternative : subclassification ISO_3166-2 code
    - subclassificationTop::Vector{String} : List subclassification ISO_3166-2 codes (top 10)
    - score::Float64 : Compatibility to NamSor_v1 Origin score value. Higher score is better, but score is not normalized. Use calibratedProbability if available. 
    - probabilityCalibrated::Float64 : The calibrated probability for subclassification to have been guessed correctly. -1 &#x3D; still calibrating. 
    - probabilityAltCalibrated::Float64 : The calibrated probability for subclassification OR subclassificationAlt to have been guessed correctly. -1 &#x3D; still calibrating. 
"""
Base.@kwdef mutable struct FirstLastNameGeoSubclassificationOut <: OpenAPI.APIModel
    script::Union{Nothing, String} = nothing
    id::Union{Nothing, String} = nothing
    explanation::Union{Nothing, String} = nothing
    firstName::Union{Nothing, String} = nothing
    lastName::Union{Nothing, String} = nothing
    countryIso2::Union{Nothing, String} = nothing
    subClassification::Union{Nothing, String} = nothing
    subClassificationAlt::Union{Nothing, String} = nothing
    subclassificationTop::Union{Nothing, Vector{String}} = nothing
    score::Union{Nothing, Float64} = nothing
    probabilityCalibrated::Union{Nothing, Float64} = nothing
    probabilityAltCalibrated::Union{Nothing, Float64} = nothing

    function FirstLastNameGeoSubclassificationOut(script, id, explanation, firstName, lastName, countryIso2, subClassification, subClassificationAlt, subclassificationTop, score, probabilityCalibrated, probabilityAltCalibrated, )
        OpenAPI.validate_property(FirstLastNameGeoSubclassificationOut, Symbol("script"), script)
        OpenAPI.validate_property(FirstLastNameGeoSubclassificationOut, Symbol("id"), id)
        OpenAPI.validate_property(FirstLastNameGeoSubclassificationOut, Symbol("explanation"), explanation)
        OpenAPI.validate_property(FirstLastNameGeoSubclassificationOut, Symbol("firstName"), firstName)
        OpenAPI.validate_property(FirstLastNameGeoSubclassificationOut, Symbol("lastName"), lastName)
        OpenAPI.validate_property(FirstLastNameGeoSubclassificationOut, Symbol("countryIso2"), countryIso2)
        OpenAPI.validate_property(FirstLastNameGeoSubclassificationOut, Symbol("subClassification"), subClassification)
        OpenAPI.validate_property(FirstLastNameGeoSubclassificationOut, Symbol("subClassificationAlt"), subClassificationAlt)
        OpenAPI.validate_property(FirstLastNameGeoSubclassificationOut, Symbol("subclassificationTop"), subclassificationTop)
        OpenAPI.validate_property(FirstLastNameGeoSubclassificationOut, Symbol("score"), score)
        OpenAPI.validate_property(FirstLastNameGeoSubclassificationOut, Symbol("probabilityCalibrated"), probabilityCalibrated)
        OpenAPI.validate_property(FirstLastNameGeoSubclassificationOut, Symbol("probabilityAltCalibrated"), probabilityAltCalibrated)
        return new(script, id, explanation, firstName, lastName, countryIso2, subClassification, subClassificationAlt, subclassificationTop, score, probabilityCalibrated, probabilityAltCalibrated, )
    end
end # type FirstLastNameGeoSubclassificationOut

const _property_types_FirstLastNameGeoSubclassificationOut = Dict{Symbol,String}(Symbol("script")=>"String", Symbol("id")=>"String", Symbol("explanation")=>"String", Symbol("firstName")=>"String", Symbol("lastName")=>"String", Symbol("countryIso2")=>"String", Symbol("subClassification")=>"String", Symbol("subClassificationAlt")=>"String", Symbol("subclassificationTop")=>"Vector{String}", Symbol("score")=>"Float64", Symbol("probabilityCalibrated")=>"Float64", Symbol("probabilityAltCalibrated")=>"Float64", )
OpenAPI.property_type(::Type{ FirstLastNameGeoSubclassificationOut }, name::Symbol) = Union{Nothing,eval(Base.Meta.parse(_property_types_FirstLastNameGeoSubclassificationOut[name]))}

function check_required(o::FirstLastNameGeoSubclassificationOut)
    true
end

function OpenAPI.validate_property(::Type{ FirstLastNameGeoSubclassificationOut }, name::Symbol, val)
    if name === Symbol("score")
        OpenAPI.validate_param(name, "FirstLastNameGeoSubclassificationOut", :format, val, "double")
    end
    if name === Symbol("score")
        OpenAPI.validate_param(name, "FirstLastNameGeoSubclassificationOut", :maximum, val, 100, false)
        OpenAPI.validate_param(name, "FirstLastNameGeoSubclassificationOut", :minimum, val, 0, false)
    end
    if name === Symbol("probabilityCalibrated")
        OpenAPI.validate_param(name, "FirstLastNameGeoSubclassificationOut", :format, val, "double")
    end
    if name === Symbol("probabilityCalibrated")
        OpenAPI.validate_param(name, "FirstLastNameGeoSubclassificationOut", :maximum, val, 1, false)
        OpenAPI.validate_param(name, "FirstLastNameGeoSubclassificationOut", :minimum, val, -1, false)
    end
    if name === Symbol("probabilityAltCalibrated")
        OpenAPI.validate_param(name, "FirstLastNameGeoSubclassificationOut", :format, val, "double")
    end
    if name === Symbol("probabilityAltCalibrated")
        OpenAPI.validate_param(name, "FirstLastNameGeoSubclassificationOut", :maximum, val, 1, false)
        OpenAPI.validate_param(name, "FirstLastNameGeoSubclassificationOut", :minimum, val, -1, false)
    end
end
