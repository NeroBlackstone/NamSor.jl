# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.


@doc raw"""APIPlanSubscriptionOut
The API Plan governing the subscription.

    APIPlanSubscriptionOut(;
        apiKey=nothing,
        planStarted=nothing,
        priorPlanStarted=nothing,
        planEnded=nothing,
        taxRate=nothing,
        planName=nothing,
        planBaseFeesKey=nothing,
        planStatus=nothing,
        planQuota=nothing,
        priceUSD=nothing,
        priceOverageUSD=nothing,
        price=nothing,
        priceOverage=nothing,
        currency=nothing,
        currencyFactor=nothing,
        stripeCustomerId=nothing,
        stripeStatus=nothing,
        stripeSubscription=nothing,
        userId=nothing,
    )

    - apiKey::String : User API Key.
    - planStarted::Int64 : Datetime when the user subscribed to the current plan.
    - priorPlanStarted::Int64 : Datetime when the user subscribed to the prior plan.
    - planEnded::Int64 : Datetime when the user ended the plan.
    - taxRate::Float64 : Applicable tax rate for the plan.
    - planName::String : Current plan name.
    - planBaseFeesKey::String : Current plan key (as in Stripe product).
    - planStatus::String : Plan status.
    - planQuota::Int64 : Current plan quota in quantity of units (NB: some API use several units per name).
    - priceUSD::Float64 : Current plan monthly price expressed in USD (includes a free quota).
    - priceOverageUSD::Float64 : Current plan price for overages expressed in USD (extra price per unit above the free quota).
    - price::Float64 : Current plan price for overages expressed in Currency (extra price per unit above the free quota).
    - priceOverage::Float64 : Current plan price for overages expressed in Currency (extra price per unit above the free quota).
    - currency::String : Current plan Currency for prices.
    - currencyFactor::Float64 : For USD, GBP, EUR - the factor is 1.
    - stripeCustomerId::String : Stripe customer identifier.
    - stripeStatus::String : Stripe status ex active.
    - stripeSubscription::String : Stripe subscription identifier.
    - userId::String : Internal user identifier.
"""
Base.@kwdef mutable struct APIPlanSubscriptionOut <: OpenAPI.APIModel
    apiKey::Union{Nothing, String} = nothing
    planStarted::Union{Nothing, Int64} = nothing
    priorPlanStarted::Union{Nothing, Int64} = nothing
    planEnded::Union{Nothing, Int64} = nothing
    taxRate::Union{Nothing, Float64} = nothing
    planName::Union{Nothing, String} = nothing
    planBaseFeesKey::Union{Nothing, String} = nothing
    planStatus::Union{Nothing, String} = nothing
    planQuota::Union{Nothing, Int64} = nothing
    priceUSD::Union{Nothing, Float64} = nothing
    priceOverageUSD::Union{Nothing, Float64} = nothing
    price::Union{Nothing, Float64} = nothing
    priceOverage::Union{Nothing, Float64} = nothing
    currency::Union{Nothing, String} = nothing
    currencyFactor::Union{Nothing, Float64} = nothing
    stripeCustomerId::Union{Nothing, String} = nothing
    stripeStatus::Union{Nothing, String} = nothing
    stripeSubscription::Union{Nothing, String} = nothing
    userId::Union{Nothing, String} = nothing

    function APIPlanSubscriptionOut(apiKey, planStarted, priorPlanStarted, planEnded, taxRate, planName, planBaseFeesKey, planStatus, planQuota, priceUSD, priceOverageUSD, price, priceOverage, currency, currencyFactor, stripeCustomerId, stripeStatus, stripeSubscription, userId, )
        OpenAPI.validate_property(APIPlanSubscriptionOut, Symbol("apiKey"), apiKey)
        OpenAPI.validate_property(APIPlanSubscriptionOut, Symbol("planStarted"), planStarted)
        OpenAPI.validate_property(APIPlanSubscriptionOut, Symbol("priorPlanStarted"), priorPlanStarted)
        OpenAPI.validate_property(APIPlanSubscriptionOut, Symbol("planEnded"), planEnded)
        OpenAPI.validate_property(APIPlanSubscriptionOut, Symbol("taxRate"), taxRate)
        OpenAPI.validate_property(APIPlanSubscriptionOut, Symbol("planName"), planName)
        OpenAPI.validate_property(APIPlanSubscriptionOut, Symbol("planBaseFeesKey"), planBaseFeesKey)
        OpenAPI.validate_property(APIPlanSubscriptionOut, Symbol("planStatus"), planStatus)
        OpenAPI.validate_property(APIPlanSubscriptionOut, Symbol("planQuota"), planQuota)
        OpenAPI.validate_property(APIPlanSubscriptionOut, Symbol("priceUSD"), priceUSD)
        OpenAPI.validate_property(APIPlanSubscriptionOut, Symbol("priceOverageUSD"), priceOverageUSD)
        OpenAPI.validate_property(APIPlanSubscriptionOut, Symbol("price"), price)
        OpenAPI.validate_property(APIPlanSubscriptionOut, Symbol("priceOverage"), priceOverage)
        OpenAPI.validate_property(APIPlanSubscriptionOut, Symbol("currency"), currency)
        OpenAPI.validate_property(APIPlanSubscriptionOut, Symbol("currencyFactor"), currencyFactor)
        OpenAPI.validate_property(APIPlanSubscriptionOut, Symbol("stripeCustomerId"), stripeCustomerId)
        OpenAPI.validate_property(APIPlanSubscriptionOut, Symbol("stripeStatus"), stripeStatus)
        OpenAPI.validate_property(APIPlanSubscriptionOut, Symbol("stripeSubscription"), stripeSubscription)
        OpenAPI.validate_property(APIPlanSubscriptionOut, Symbol("userId"), userId)
        return new(apiKey, planStarted, priorPlanStarted, planEnded, taxRate, planName, planBaseFeesKey, planStatus, planQuota, priceUSD, priceOverageUSD, price, priceOverage, currency, currencyFactor, stripeCustomerId, stripeStatus, stripeSubscription, userId, )
    end
end # type APIPlanSubscriptionOut

const _property_types_APIPlanSubscriptionOut = Dict{Symbol,String}(Symbol("apiKey")=>"String", Symbol("planStarted")=>"Int64", Symbol("priorPlanStarted")=>"Int64", Symbol("planEnded")=>"Int64", Symbol("taxRate")=>"Float64", Symbol("planName")=>"String", Symbol("planBaseFeesKey")=>"String", Symbol("planStatus")=>"String", Symbol("planQuota")=>"Int64", Symbol("priceUSD")=>"Float64", Symbol("priceOverageUSD")=>"Float64", Symbol("price")=>"Float64", Symbol("priceOverage")=>"Float64", Symbol("currency")=>"String", Symbol("currencyFactor")=>"Float64", Symbol("stripeCustomerId")=>"String", Symbol("stripeStatus")=>"String", Symbol("stripeSubscription")=>"String", Symbol("userId")=>"String", )
OpenAPI.property_type(::Type{ APIPlanSubscriptionOut }, name::Symbol) = Union{Nothing,eval(Base.Meta.parse(_property_types_APIPlanSubscriptionOut[name]))}

function check_required(o::APIPlanSubscriptionOut)
    true
end

function OpenAPI.validate_property(::Type{ APIPlanSubscriptionOut }, name::Symbol, val)
    if name === Symbol("planStarted")
        OpenAPI.validate_param(name, "APIPlanSubscriptionOut", :format, val, "int64")
    end
    if name === Symbol("priorPlanStarted")
        OpenAPI.validate_param(name, "APIPlanSubscriptionOut", :format, val, "int64")
    end
    if name === Symbol("planEnded")
        OpenAPI.validate_param(name, "APIPlanSubscriptionOut", :format, val, "int64")
    end
    if name === Symbol("taxRate")
        OpenAPI.validate_param(name, "APIPlanSubscriptionOut", :format, val, "double")
    end
    if name === Symbol("planQuota")
        OpenAPI.validate_param(name, "APIPlanSubscriptionOut", :format, val, "int64")
    end
    if name === Symbol("priceUSD")
        OpenAPI.validate_param(name, "APIPlanSubscriptionOut", :format, val, "double")
    end
    if name === Symbol("priceOverageUSD")
        OpenAPI.validate_param(name, "APIPlanSubscriptionOut", :format, val, "double")
    end
    if name === Symbol("price")
        OpenAPI.validate_param(name, "APIPlanSubscriptionOut", :format, val, "double")
    end
    if name === Symbol("priceOverage")
        OpenAPI.validate_param(name, "APIPlanSubscriptionOut", :format, val, "double")
    end
    if name === Symbol("currencyFactor")
        OpenAPI.validate_param(name, "APIPlanSubscriptionOut", :format, val, "double")
    end
end
