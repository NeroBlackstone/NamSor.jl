# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.


@doc raw"""PersonalNameParsedOut

    PersonalNameParsedOut(;
        script=nothing,
        id=nothing,
        explanation=nothing,
        name=nothing,
        nameParserType=nothing,
        nameParserTypeAlt=nothing,
        firstLastName=nothing,
        score=nothing,
    )

    - script::String
    - id::String
    - explanation::String
    - name::String : The input name.
    - nameParserType::String : Name parsing is addressed as a classification problem, for example FN1LN1 means a first then last name order.
    - nameParserTypeAlt::String : Second best alternative parsing. Name parsing is addressed as a classification problem, for example FN1LN1 means a first then last name order.
    - firstLastName::FirstLastNameOut
    - score::Float64 : Higher score is better, but score is not normalized. Use calibratedProbability if available. 
"""
Base.@kwdef mutable struct PersonalNameParsedOut <: OpenAPI.APIModel
    script::Union{Nothing, String} = nothing
    id::Union{Nothing, String} = nothing
    explanation::Union{Nothing, String} = nothing
    name::Union{Nothing, String} = nothing
    nameParserType::Union{Nothing, String} = nothing
    nameParserTypeAlt::Union{Nothing, String} = nothing
    firstLastName = nothing # spec type: Union{ Nothing, FirstLastNameOut }
    score::Union{Nothing, Float64} = nothing

    function PersonalNameParsedOut(script, id, explanation, name, nameParserType, nameParserTypeAlt, firstLastName, score, )
        OpenAPI.validate_property(PersonalNameParsedOut, Symbol("script"), script)
        OpenAPI.validate_property(PersonalNameParsedOut, Symbol("id"), id)
        OpenAPI.validate_property(PersonalNameParsedOut, Symbol("explanation"), explanation)
        OpenAPI.validate_property(PersonalNameParsedOut, Symbol("name"), name)
        OpenAPI.validate_property(PersonalNameParsedOut, Symbol("nameParserType"), nameParserType)
        OpenAPI.validate_property(PersonalNameParsedOut, Symbol("nameParserTypeAlt"), nameParserTypeAlt)
        OpenAPI.validate_property(PersonalNameParsedOut, Symbol("firstLastName"), firstLastName)
        OpenAPI.validate_property(PersonalNameParsedOut, Symbol("score"), score)
        return new(script, id, explanation, name, nameParserType, nameParserTypeAlt, firstLastName, score, )
    end
end # type PersonalNameParsedOut

const _property_types_PersonalNameParsedOut = Dict{Symbol,String}(Symbol("script")=>"String", Symbol("id")=>"String", Symbol("explanation")=>"String", Symbol("name")=>"String", Symbol("nameParserType")=>"String", Symbol("nameParserTypeAlt")=>"String", Symbol("firstLastName")=>"FirstLastNameOut", Symbol("score")=>"Float64", )
OpenAPI.property_type(::Type{ PersonalNameParsedOut }, name::Symbol) = Union{Nothing,eval(Base.Meta.parse(_property_types_PersonalNameParsedOut[name]))}

function check_required(o::PersonalNameParsedOut)
    true
end

function OpenAPI.validate_property(::Type{ PersonalNameParsedOut }, name::Symbol, val)
    if name === Symbol("nameParserType")
        OpenAPI.validate_param(name, "PersonalNameParsedOut", :enum, val, ["FN1LN1", "LN1FN1", "FN1LN2", "LN2FN1", "FN1LNx", "LNxFN1", "FN2LN1", "LN1FN2", "FN2LN2", "LN2FN2", "FN2LNx", "LNxFN2", "FNxLN1", "LN1FNx", "FNxLN2", "LN2FNx", "FNxLNx", "LNxFNx"])
    end
    if name === Symbol("nameParserTypeAlt")
        OpenAPI.validate_param(name, "PersonalNameParsedOut", :enum, val, ["FN1LN1", "LN1FN1", "FN1LN2", "LN2FN1", "FN1LNx", "LNxFN1", "FN2LN1", "LN1FN2", "FN2LN2", "LN2FN2", "FN2LNx", "LNxFN2", "FNxLN1", "LN1FNx", "FNxLN2", "LN2FNx", "FNxLNx", "LNxFNx"])
    end
    if name === Symbol("score")
        OpenAPI.validate_param(name, "PersonalNameParsedOut", :format, val, "double")
    end
    if name === Symbol("score")
        OpenAPI.validate_param(name, "PersonalNameParsedOut", :maximum, val, 100, false)
        OpenAPI.validate_param(name, "PersonalNameParsedOut", :minimum, val, 0, false)
    end
end
