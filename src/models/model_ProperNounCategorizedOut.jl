# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.


@doc raw"""ProperNounCategorizedOut
Classified typed proper names

    ProperNounCategorizedOut(;
        script=nothing,
        id=nothing,
        explanation=nothing,
        name=nothing,
        commonType=nothing,
        commonTypeAlt=nothing,
        score=nothing,
    )

    - script::String
    - id::String
    - explanation::String
    - name::String : The input name
    - commonType::String : The most likely common name type
    - commonTypeAlt::String : Best alternative for : The most likely common name type
    - score::Float64 : Higher score is better, but score is not normalized. Use calibratedProbability if available. 
"""
Base.@kwdef mutable struct ProperNounCategorizedOut <: OpenAPI.APIModel
    script::Union{Nothing, String} = nothing
    id::Union{Nothing, String} = nothing
    explanation::Union{Nothing, String} = nothing
    name::Union{Nothing, String} = nothing
    commonType::Union{Nothing, String} = nothing
    commonTypeAlt::Union{Nothing, String} = nothing
    score::Union{Nothing, Float64} = nothing

    function ProperNounCategorizedOut(script, id, explanation, name, commonType, commonTypeAlt, score, )
        OpenAPI.validate_property(ProperNounCategorizedOut, Symbol("script"), script)
        OpenAPI.validate_property(ProperNounCategorizedOut, Symbol("id"), id)
        OpenAPI.validate_property(ProperNounCategorizedOut, Symbol("explanation"), explanation)
        OpenAPI.validate_property(ProperNounCategorizedOut, Symbol("name"), name)
        OpenAPI.validate_property(ProperNounCategorizedOut, Symbol("commonType"), commonType)
        OpenAPI.validate_property(ProperNounCategorizedOut, Symbol("commonTypeAlt"), commonTypeAlt)
        OpenAPI.validate_property(ProperNounCategorizedOut, Symbol("score"), score)
        return new(script, id, explanation, name, commonType, commonTypeAlt, score, )
    end
end # type ProperNounCategorizedOut

const _property_types_ProperNounCategorizedOut = Dict{Symbol,String}(Symbol("script")=>"String", Symbol("id")=>"String", Symbol("explanation")=>"String", Symbol("name")=>"String", Symbol("commonType")=>"String", Symbol("commonTypeAlt")=>"String", Symbol("score")=>"Float64", )
OpenAPI.property_type(::Type{ ProperNounCategorizedOut }, name::Symbol) = Union{Nothing,eval(Base.Meta.parse(_property_types_ProperNounCategorizedOut[name]))}

function check_required(o::ProperNounCategorizedOut)
    true
end

function OpenAPI.validate_property(::Type{ ProperNounCategorizedOut }, name::Symbol, val)
    if name === Symbol("score")
        OpenAPI.validate_param(name, "ProperNounCategorizedOut", :format, val, "double")
    end
    if name === Symbol("score")
        OpenAPI.validate_param(name, "ProperNounCategorizedOut", :maximum, val, 100, false)
        OpenAPI.validate_param(name, "ProperNounCategorizedOut", :minimum, val, 0, false)
    end
end
