# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.


@doc raw"""NameMatchCandidateOut
The ordered list of name matching candidates

    NameMatchCandidateOut(;
        candidateName=nothing,
        probability=nothing,
        predScoreGivenName=nothing,
        predScoreFamilyName=nothing,
    )

    - candidateName::String : The name matching candidate name
    - probability::Float64 : The name matching estimated probability.
    - predScoreGivenName::Float64 : The given name prediction score.
    - predScoreFamilyName::Float64 : The family name prediction score.
"""
Base.@kwdef mutable struct NameMatchCandidateOut <: OpenAPI.APIModel
    candidateName::Union{Nothing, String} = nothing
    probability::Union{Nothing, Float64} = nothing
    predScoreGivenName::Union{Nothing, Float64} = nothing
    predScoreFamilyName::Union{Nothing, Float64} = nothing

    function NameMatchCandidateOut(candidateName, probability, predScoreGivenName, predScoreFamilyName, )
        OpenAPI.validate_property(NameMatchCandidateOut, Symbol("candidateName"), candidateName)
        OpenAPI.validate_property(NameMatchCandidateOut, Symbol("probability"), probability)
        OpenAPI.validate_property(NameMatchCandidateOut, Symbol("predScoreGivenName"), predScoreGivenName)
        OpenAPI.validate_property(NameMatchCandidateOut, Symbol("predScoreFamilyName"), predScoreFamilyName)
        return new(candidateName, probability, predScoreGivenName, predScoreFamilyName, )
    end
end # type NameMatchCandidateOut

const _property_types_NameMatchCandidateOut = Dict{Symbol,String}(Symbol("candidateName")=>"String", Symbol("probability")=>"Float64", Symbol("predScoreGivenName")=>"Float64", Symbol("predScoreFamilyName")=>"Float64", )
OpenAPI.property_type(::Type{ NameMatchCandidateOut }, name::Symbol) = Union{Nothing,eval(Base.Meta.parse(_property_types_NameMatchCandidateOut[name]))}

function check_required(o::NameMatchCandidateOut)
    true
end

function OpenAPI.validate_property(::Type{ NameMatchCandidateOut }, name::Symbol, val)
    if name === Symbol("probability")
        OpenAPI.validate_param(name, "NameMatchCandidateOut", :format, val, "double")
    end
    if name === Symbol("predScoreGivenName")
        OpenAPI.validate_param(name, "NameMatchCandidateOut", :format, val, "double")
    end
    if name === Symbol("predScoreFamilyName")
        OpenAPI.validate_param(name, "NameMatchCandidateOut", :format, val, "double")
    end
end
